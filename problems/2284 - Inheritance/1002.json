{"description": "# Description\n<p>Design a class named Triangle that extends <strong>GeometricObject </strong>class.<br />\r\nThe class contains:<br />\r\nThree <strong>double</strong> data fields named <strong>side1</strong>, <strong>side2</strong>, and <strong>side3</strong> with default values <strong>1.0</strong> to denote three sides of the triangle.<br />\r\nA no-arg constructor that creates a default triangle with color = &quot;blue&quot;, filled = true.<br />\r\nA constructor that creates a triangle with the specified side1, side2, side3 and color = &quot;blue&quot;, filled = true.<br />\r\nThe accessor functions for all three data fields, named <strong>getSide1()</strong>, <strong>getSide2()</strong>, <strong>getSide3()</strong>.<br />\r\nA function named <strong>getArea()</strong> that returns the area of this triangle.<br />\r\nA function named <strong>getPerimeter()</strong> that returns the perimeter of the triangle.<br />\r\n<br />\r\nclass GeometricObject<br />\r\n{<br />\r\npublic:<br />\r\n&nbsp; GeometricObject(string color, bool filled)<br />\r\n&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp; this-&gt;color = color;<br />\r\n&nbsp;&nbsp;&nbsp; this-&gt;filled = filled;<br />\r\n&nbsp; }<br />\r\n&nbsp; <br />\r\n&nbsp; string getColor()<br />\r\n&nbsp; { return color; }<br />\r\n&nbsp; void setColor(string color)<br />\r\n&nbsp; { this-&gt;color = color; }<br />\r\n&nbsp; bool isFilled()<br />\r\n&nbsp; { return filled; }<br />\r\n&nbsp; void setFilled(bool filled)<br />\r\n&nbsp; { this-&gt;filled = filled;}<br />\r\n&nbsp; string toString()<br />\r\n&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp; return &quot;Geometric object color &quot; + color +<br />\r\n&nbsp;&nbsp;&nbsp; &quot; filled &quot; + ((filled) ? &quot;true&quot; : &quot;false&quot;);<br />\r\n&nbsp; }<br />\r\nprivate:<br />\r\n&nbsp; string color;<br />\r\n&nbsp; bool filled;<br />\r\n};<br />\r\n&nbsp;</p>\n# Input\n\n# Output\n\n# Sample_Input\n```\n\n```\n# Sample_Ouput\n```\n\n```\n# Hint\n<p>Please submit the GeometricObject class and Triangle class.</p>\r\n<p>Don't submit the main() function.</p>\n", "title": "From Sicily::2284 - Inheritance::1002::The Triangle Class", "ptype_id": 0, "files": {"random_source": {}, "standard_input": {"standard_input0": ""}, "support": {"framework.cpp": "#include <iostream>\n#include <string>\n#include \"source.h\"\nusing namespace std;\nint main()\n{\n  Triangle shape1;\n  cout << shape1.getSide1() << endl;\n  cout << shape1.getSide2() << endl;\n  cout << shape1.getSide3() << endl;  \n  cout << shape1.getArea() << endl;\n  cout << shape1.getPerimeter() << endl;\n  cout << shape1.getColor() << endl;\n  cout << shape1.isFilled() << endl;\n\n  Triangle shape(1, 1.5, 1);\n  cout << shape.getColor() << endl;\n  cout << shape.isFilled() << endl;\n\n  shape.setColor(\"yellow\");\n  shape.setFilled(true);\n\n  cout << shape.getSide1() << endl;\n  cout << shape.getSide2() << endl;\n  cout << shape.getSide3() << endl;  \n  cout << shape.getArea() << endl;\n  cout << shape.getPerimeter() << endl;\n  cout << shape.getColor() << endl;\n  cout << shape.isFilled() << endl;\n\n  return 0;\n}\n"}, "hidden_support": {}, "submission": {"source.h": "#include <iostream>\n#include <cmath>\nusing namespace std;\nclass GeometricObject {\n\tpublic:\n\t\tGeometricObject(string color, bool filled) {\n\t\t\tthis->color = color;\n\t\t\tthis->filled = filled;\n\t\t}\n\n\t\tstring getColor() {\n\t\t\treturn color;\n\t\t}\n\t\tvoid setColor(string color) {\n\t\t\tthis->color = color;\n\t\t}\n\t\tbool isFilled() {\n\t\t\treturn filled;\n\t\t}\n\t\tvoid setFilled(bool filled) {\n\t\t\tthis->filled = filled;\n\t\t}\n\t\tstring toString() {\n\t\t\treturn \"Geometric object color \" + color +\n\t\t\t       \" filled \" + ((filled) ? \"true\" : \"false\");\n\t\t}\n\tprivate:\n\t\tstring color;\n\t\tbool filled;\n};\n\nclass Triangle: public GeometricObject {\n\tprivate:\n\t\tdouble side1, side2, side3;\n\tpublic:\n\t\tTriangle(): side1(1.0), side2(1.0), side3(1.0), GeometricObject(\"blue\", true)  {};\n\t\tTriangle(double s1, double s2, double s3, string s = \"blue\", bool b = true): side1(s1), side2(s2), side3(s3), GeometricObject(s,b) {};\n\t\tdouble getSide1() {\n\t\t\treturn side1;\n\t\t}\n\t\tdouble getSide2() {\n\t\t\treturn side2;\n\t\t}\n\t\tdouble getSide3() {\n\t\t\treturn side3;\n\t\t}\n\t\tdouble getArea() {\n\t\t\tdouble p = (side1 + side2 + side3) / 2;\n\t\t\tdouble area;\n\t\t\tarea = sqrt(p*(p-side1)*(p-side2)*(p-side3));\n\t\t\treturn area;\n\t\t}\n\t\tdouble getPerimeter() {\n\t\t\treturn side1 + side2 + side3;\n\t\t}\n};\n\n"}, "standard_output": {"standard_output0": "1\n1\n1\n0.433013\n3\nblue\n1\nblue\n1\n1\n1.5\n1\n0.496078\n3.5\nyellow\n1\n"}}, "config": {"grading": {"memory check": 0, "google tests": 0, "standard tests": 70, "static check": 20, "compile check": 10, "random tests": 0, "google tests detail": {}}, "random": {"run_times": 0, "compile_command": "gcc SOURCE -w -std=c++14 -o random"}, "submission": ["source.h"], "exec_flag": "--gtest_output=xml:/tmp/Result.xml", "standard_score": 100, "entry_point": "standard_main.exe", "google tests info": {}, "standard_language": "c++", "compilers": {"c++": {"command": "g++ framework.cpp -g -w -lm -std=c++14 -o OUTPUT_PROGRAM", "version": "default"}, "clang++": {"command": "clang++ framework.cpp -g -w -lm -std=c++11 -o OUTPUT_PROGRAM", "version": "default"}, "clang": {"command": "clang framework.cpp -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}, "c": {"command": "gcc framework.cpp -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}}, "standard": {"random_source": [], "standard_input": ["standard_input0"], "hidden_support": [], "standard_output": ["standard_output0"], "support": ["framework.cpp"]}, "output_program": "main.exe", "language": ["c++"], "limits": {"time": 1000, "memory": 32}}}