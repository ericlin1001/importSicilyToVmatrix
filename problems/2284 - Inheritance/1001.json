{"description": "# The Person, Student, Employee, Faculty and Staff Class\n\n# Description\n<p>Design a class named <strong>Person</strong> and its two derived classes named <strong>Student</strong> and <strong>Employee</strong>. Make <strong>Faculty</strong> and <strong>Staff</strong> derived classes of <strong>Employee</strong>.<br />\r\nPerson class has the following member:<br />\r\n&nbsp; string name;<br />\r\n&nbsp; string address;<br />\r\n&nbsp; string phoneNumber;<br />\r\n&nbsp; string email;<br />\r\nStudent class has the following member:<br />\r\n&nbsp; enum class_status{frssman,sophomore,junior,senior};&nbsp; <br />\r\n&nbsp; class_status status;<br />\r\nEmployee class has the following member:<br />\r\n&nbsp; string office;<br />\r\n&nbsp; int salary;<br />\r\n&nbsp; MyDate dateHired;<br />\r\nFaculty class has the following member:<br />\r\n&nbsp; string officeHours;<br />\r\n&nbsp; int rank;<br />\r\nStaff class has the following member:<br />\r\n&nbsp; string title;<br />\r\nMyDate class contains the following member: <br />\r\n&nbsp; int year;<br />\r\n&nbsp; int month;<br />\r\n&nbsp; int day;<br />\r\n<br />\r\nOverride the toString function in each class to display the class name.<br />\r\nFor example, in Employee class:<br />\r\nstring toString()<br />\r\n{<br />\r\n&nbsp; return &quot;Employee&quot;;<br />\r\n}</p>\r\n<p>Make sure that the following code: <br />\r\n&nbsp; void f(Person &amp;p)<br />\r\n&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp; cout &lt;&lt; p.toString() &lt;&lt; endl;<br />\r\n&nbsp; }</p>\r\n<p>&nbsp; Person person;<br />\r\n&nbsp; Student student;<br />\r\n&nbsp; Employee employee;<br />\r\n&nbsp; Faculty faculty;<br />\r\n&nbsp; Staff staff;<br />\r\n&nbsp; f(person);<br />\r\n&nbsp; f(student);<br />\r\n&nbsp; f(employee);<br />\r\n&nbsp; f(faculty);<br />\r\n&nbsp; f(staff);<br />\r\n<br />\r\noutput:<br />\r\n&nbsp; Person<br />\r\n&nbsp; Student<br />\r\n&nbsp; Employee<br />\r\n&nbsp; Faculty<br />\r\n&nbsp; Staff<br />\r\n&nbsp;&nbsp;</p>\n\n# Input\n\n\n# Output\n\n\n# Sample_Input\n```\n\n```\n\n# Sample_Ouput\n```\n\n```\n\n# Hint\n\n\n", "files": {"standard_output": {"standard_output0": "Person\nPerson\nPerson\nPerson\nPerson\nEmployee\nEmployee\nEmployee\nPerson\nStudent\nEmployee\nFaculty\nStaff\n"}, "support": {"framework.cpp": "#include <iostream>\n#include <string>\n#include \"source.h\"\nusing namespace std;\n\nvoid f1(Person p)\n{\n  cout << p.toString() << endl;\n}\n\nvoid f2(Employee e)\n{\n  cout << e.toString() << endl;\n}\n\nvoid f(Person &p)\n{\n  cout << p.toString() << endl;\n}\n\nint main()\n{\n  Person person;\n  Student student;\n  Employee employee;\n  Faculty faculty;\n  Staff staff;\n\n  f1(person);\n  f1(student);\n  f1(employee);\n  f1(faculty);\n  f1(staff);\n  \n  f2(employee);\n  f2(faculty);\n  f2(staff);\n  \n  f(person);\n  f(student);\n  f(employee);\n  f(faculty);\n  f(staff);\n  \n  return 0;\n}\n"}, "standard_input": {"standard_input0": ""}, "hidden_support": {}, "submission": {"source.h": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nclass MyDate {\n\tprivate:\n\t\tint year;\n\t\tint month;\n\t\tint day;\n};\n\nclass Person {\n\tprivate:\n\t\tstring name;\n\t\tstring address;\n\t\tstring phoneNumber;\n\t\tstring email;\n\tpublic:\n\t\tvirtual string toString() {\n\t\t\treturn \"Person\";\n\t\t}\n};\n\nclass Student:public Person {\n\tprivate:\n\t\tenum class_status {frssman,sophomore,junior,senior};\n\t\tclass_status status;\n\tpublic:\n\t\tstring toString() {\n\t\t\treturn \"Student\";\n\t\t}\n};\n\nclass Employee:public Person {\n\tprivate:\n\t\tstring office;\n\t\tint salary;\n\t\tMyDate dateHired;\n\tpublic:\n\t\tstring toString() {\n\t\t\treturn \"Employee\";\n\t\t}\n};\n\nclass Faculty:public Employee {\n\tprivate:\n\t\tstring officeHours;\n\t\tint rank;\n\tpublic:\n\t\tstring toString() {\n\t\t\treturn \"Faculty\";\n\t\t}\n};\n\nclass Staff:public Employee {\n\tprivate:\n\t\tstring title;\n\tpublic:\n\t\tstring toString() {\n\t\t\treturn \"Staff\";\n\t\t}\n};\n\nclass class_status {};\n\n"}, "random_source": {}}, "config": {"google tests info": {}, "entry_point": "standard_main.exe", "limits": {"memory": 32, "time": 1000}, "standard_score": 100, "output_program": "main.exe", "compilers": {"c++": {"command": "g++ framework.cpp -g -w -lm -std=c++14 -o OUTPUT_PROGRAM", "version": "default"}, "clang": {"command": "clang framework.cpp -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}, "c": {"command": "gcc framework.cpp -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}, "clang++": {"command": "clang++ framework.cpp -g -w -lm -std=c++11 -o OUTPUT_PROGRAM", "version": "default"}}, "submission": ["source.h"], "language": ["c++"], "standard": {"standard_output": ["standard_output0"], "support": ["framework.cpp"], "standard_input": ["standard_input0"], "random_source": [], "hidden_support": []}, "grading": {"compile check": 10, "memory check": 0, "google tests detail": {}, "static check": 20, "standard tests": 70, "google tests": 0, "random tests": 0}, "exec_flag": "--gtest_output=xml:/tmp/Result.xml", "standard_language": "c++", "random": {"compile_command": "gcc SOURCE -w -std=c++14 -o random", "run_times": 0}}, "ptype_id": 0, "title": "From Sicily::2284 - Inheritance::1001::The Person, Student, Employee, Faculty and Staff Class"}