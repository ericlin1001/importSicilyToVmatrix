{"files": {"random_source": {}, "hidden_support": {}, "submission": {"source.cpp": "#include<iostream>\nusing namespace std;\n\nint main() {\n\tint n, num = 0;\n\tchar c;\n\tcin >> n;\n\tcin.get();\n\twhile (num < n) {\n\t\tc = cin.get();\n\t\tif (c == '*') {\n\t\t\t++num;\n\t\t\tcout << endl;\n\t\t} else {\n\t\t\tcout << c;\n\t\t}\n\t}\n\treturn 0;\n}\n"}, "standard_output": {"standard_output1": "asf 342\n daslj\n dafjl\n daf\n", "standard_output0": "testtest\n testtesttest \ntest\n\ntest test\n"}, "support": {}, "standard_input": {"standard_input0": "3\ntesttest* testtesttest \ntest*\ntest test*\n", "standard_input1": "4\nasf 342* daslj* dafjl* daf* *daflds*lfjda*"}}, "ptype_id": 0, "title": "From Sicily::2339 - Polymorphism and I_O::1003::Seperate by *", "description": "# Seperate by *\n\n# Description\n<p>I want to seperate my input data by *. and then output each item .</p>\r\n<p>&nbsp;</p>\n\n# Input\n<p>First Line is an integer N to specify the number of item i will seperate.</p>\r\n<p>then is the input data containing at least N *.</p>\n\n# Output\n<p>output the first N items</p>\n\n# Sample_Input\n```\n3\r\ntesttest* testtesttest \r\ntest*\r\ntest test*\r\n\n```\n\n# Sample_Ouput\n```\ntesttest\r\n testtesttest \r\ntest\r\n\r\ntest test\r\n\n```\n\n# Hint\n<p>&nbsp;</p>\r\n<p>item may include space or return</p>\n\n", "config": {"entry_point": "standard_main.exe", "exec_flag": "--gtest_output=xml:/tmp/Result.xml", "standard_language": "c++", "standard_score": 100, "grading": {"standard tests": 70, "google tests detail": {}, "google tests": 0, "random tests": 0, "memory check": 0, "static check": 20, "compile check": 10}, "random": {"run_times": 0, "compile_command": "gcc SOURCE -w -std=c++14 -o random"}, "submission": ["source.cpp"], "output_program": "main.exe", "limits": {"time": 1000, "memory": 32}, "google tests info": {}, "language": ["c++"], "compilers": {"clang": {"version": "default", "command": "clang CODE_FILES -g -w -lm -o OUTPUT_PROGRAM"}, "clang++": {"version": "default", "command": "clang++ CODE_FILES -g -w -lm -std=c++11 -o OUTPUT_PROGRAM"}, "c": {"version": "default", "command": "gcc CODE_FILES -g -w -lm -o OUTPUT_PROGRAM"}, "c++": {"version": "default", "command": "g++ CODE_FILES -g -w -lm -std=c++14 -o OUTPUT_PROGRAM"}}, "standard": {"random_source": [], "standard_output": ["standard_output0", "standard_output1"], "hidden_support": [], "standard_input": ["standard_input0", "standard_input1"], "support": []}}}