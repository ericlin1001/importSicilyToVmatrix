{"title": "From Sicily::2339 - Polymorphism and I_O::1002::format the book list again~", "files": {"standard_input": {"standard_input0": "5\nafsa 2321 0.0031321\nafsasf 421 0.0084232\ndaf 342 3423423.32\n32 4313 432.323424\n324 432 34243324.32\n"}, "support": {"framework.cpp": "#include \"source.h\"\n#include <iostream>\n#include <iomanip>\n#include <stdio.h>\nusing namespace std;\n\nint main() {\n\t//freopen(\"2.in\",\"r\",stdin);\n\t//freopen(\"2.out\",\"w\",stdout);\n\tint N, M;\n\tstring name;\n\tstring code;\n\tdouble cost;\n\tcin >> N;\n\tM = N;\n\tint i = 0;\n\tBook *books[N];\n\twhile (i++ < N) {\n\t\tcin >> name >> code >> cost;\n\t\tbooks[i] = new Book(name, code, cost);\n\t}\n\ti = 0;\n\twhile (i++ < M) {\n\n\t\tcout << \"-----:\" << *books[i];\n\n\t}\n\ti = 0;\n\twhile (i++ < M) {\n\n\t\tcout << leftform << *books[i];\n\n\t}\n\ti = 0;\n\twhile (i++ < M) {\n\n\t\tcout << rightform << *books[i];\n\n\t}\n\n}\n"}, "standard_output": {"standard_output0": "-----:           afsa           2321       0.003132\n-----:         afsasf            421       0.008423\n-----:            daf            342 3423423.320000\n-----:             32           4313     432.323424\n-----:            324            43234243324.320000\nleft :afsa           2321           0.00           \nleft :afsasf         421            0.01           \nleft :daf            342            3423423.32     \nleft :32             4313           432.32         \nleft :324            432            34243324.32    \nright:           afsa           2321           0.00\nright:         afsasf            421           0.01\nright:            daf            342     3423423.32\nright:             32           4313         432.32\nright:            324            432    34243324.32\n"}, "random_source": {}, "submission": {"source.h": "#include<iomanip>\n#include<iostream>\nusing namespace std;\nostream & leftform (ostream& strm) {\n\tstrm << resetiosflags(ios::fixed);\n\tstrm.flush();\n\tstrm << setiosflags(ios::left);\n\tstrm << \"left :\";\n\tstrm << setw(15);\n\tstrm << setiosflags(ios::fixed);\n\tstrm << setprecision(2);\n\treturn strm;\n}\n\nostream & rightform (ostream& strm) {\n\tstrm << resetiosflags(ios::fixed);\n\tstrm.flush();\n\tstrm << setiosflags(ios::right);\n\tstrm << \"right:\";\n\tstrm << setw(15);\n\tstrm << setiosflags(ios::fixed);\n\tstrm << setprecision(2);\n\treturn strm;\n}\n\nclass Book {\n\t\tstring name;\n\t\tstring code;\n\t\tdouble cost;\n\tpublic:\n\t\tBook(string s,string c,double co):name(s),code(c),cost(co) {}\n\t\tfriend ostream & operator << (ostream & os, const Book & b) {\n\t\t\tos << setiosflags(ios::fixed) << setiosflags(ios::showpoint) << setw(15) << b.name << setw(15) << b.code << setw(15) << b.cost << endl;\n\t\t\treturn os;\n\t\t}\n};\n"}, "hidden_support": {}}, "ptype_id": 0, "description": "# Description\n<p>My books want to have different kinds of formats of a booklist. To improve the reuseability of the code, we should use the object-oriated thought.&nbsp;I design the class Book as below:</p>\r\n<p>&nbsp;class Book<br />\r\n{<br />\r\n&nbsp;string name;<br />\r\n&nbsp;string code;<br />\r\n&nbsp; double cost;<br />\r\npublic:<br />\r\n&nbsp;Book(string s,string c,double co):name(s),code(c),cost(co){}<br />\r\n<br />\r\n};</p>\r\n<p>Different from last book list format demand. the&nbsp;width for name, code and cost&nbsp;are&nbsp;of the same value: 15.&nbsp;</p>\r\n<p>The main function is :</p>\r\n<p><br />\r\nint main() {<br />\r\n&nbsp; &nbsp; int N;<br />\r\n&nbsp;&nbsp;&nbsp; string name;<br />\r\n&nbsp;&nbsp;&nbsp; string code;<br />\r\n&nbsp;&nbsp;&nbsp; double cost;<br />\r\n&nbsp;&nbsp;&nbsp; cin &gt;&gt; N;<br />\r\n&nbsp;&nbsp;&nbsp; int i = 0;<br />\r\n&nbsp;&nbsp;&nbsp; Book *books[N];<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; for(i=0;i&lt;N;i++){<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cin &gt;&gt; name &gt;&gt; code &gt;&gt; cost;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; books[i] = new Book(name, code, cost);<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp; for(i=0;i&lt;N;i++){<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; &quot;-----:&quot; &lt;&lt; *books[i];<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp; for(i=0;i&lt;N;i++){<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; leftform &lt;&lt; *books[i];<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp; for(i=0;i&lt;N;i++){<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; rightform &lt;&lt; *books[i];<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n}</p>\r\n<p>&nbsp;</p>\n# Input\n<p>First line is the integer N. following with N lines, and for each line containing the name, code and cost.</p>\r\n<p>&nbsp;</p>\n# Output\n<p>Refer to the main function and the sample output</p>\n# Sample_Input\n```\n3\r\nbook1 123456 342.13\r\nbook2 456789 23\r\nbook3 789123 1.2321\r\n\n```\n# Sample_Ouput\n```\n-----:          book1         123456     342.130000\r\n-----:          book2         456789      23.000000\r\n-----:          book3         789123       1.232100\r\nleft :book1          123456         342.13         \r\nleft :book2          456789         23.00          \r\nleft :book3          789123         1.23           \r\nright:          book1         123456         342.13\r\nright:          book2         456789          23.00\r\nright:          book3         789123           1.23\r\n\n```\n# Hint\n<p><span style=\"color: rgb(255, 0, 0);\"><span style=\"font-size: large;\"><strong>default &lt;&lt; should also set out.setf(ios::showpoint);&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; out&lt;&lt;setiosflags(ios::fixed);</strong></span></span></p>\r\n<p>Different from last book list format demand. the width for name, code and cost are of the same value: 15.</p>\r\n<p>Designing your own manipulators.</p>\n", "config": {"limits": {"time": 1000, "memory": 32}, "standard_language": "c++", "standard": {"standard_input": ["standard_input0"], "random_source": [], "hidden_support": [], "support": ["framework.cpp"], "standard_output": ["standard_output0"]}, "standard_score": 100, "submission": ["source.h"], "google tests info": {}, "random": {"run_times": 0, "compile_command": "gcc SOURCE -w -std=c++14 -o random"}, "exec_flag": "--gtest_output=xml:/tmp/Result.xml", "grading": {"memory check": 0, "google tests detail": {}, "random tests": 0, "standard tests": 70, "google tests": 0, "static check": 20, "compile check": 10}, "compilers": {"c++": {"command": "g++ framework.cpp -g -w -lm -std=c++14 -o OUTPUT_PROGRAM", "version": "default"}, "clang++": {"command": "clang++ framework.cpp -g -w -lm -std=c++11 -o OUTPUT_PROGRAM", "version": "default"}, "clang": {"command": "clang framework.cpp -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}, "c": {"command": "gcc framework.cpp -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}}, "entry_point": "standard_main.exe", "output_program": "main.exe", "language": ["c++"]}}