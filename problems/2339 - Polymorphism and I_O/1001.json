{"ptype_id": 0, "title": "From Sicily::2339 - Polymorphism and I_O::1001::Format the book list", "files": {"support": {}, "hidden_support": {}, "submission": {"source.cpp": "#include <iostream>\n#include <iomanip>\n#include <string>\nusing namespace std;\nint main() {\n\tint N;\n\tstring name, code;\n\tdouble cost;\n\tcin >> N;\n\twhile(N--) {\n\t\tcin >> name >> code >> cost;\n\t\tcout << setw(15) << left << name <<\n\t\t     setw(15) << left << code <<\n\t\t     setw(10) << right << setprecision(2) << fixed << cost << endl;\n\t}\n}\n"}, "standard_output": {"standard_output0": "book1          2312123            342.13\nbook2          342                123.00\nbook3          342                  1.23\n", "standard_output1": "afsa           2321                 0.00\nafsasf         421                  0.01\ndaf            342            3423423.32\n32             4313               432.32\n324            432            34243324.32\n"}, "standard_input": {"standard_input0": "3\nbook1 2312123 342.13\nbook2 342 123\nbook3 342 1.2321\n", "standard_input1": "5\nafsa 2321 0.0031321\nafsasf 421 0.0084232\ndaf 342 3423423.32\n32 4313 432.323424\n324 432 34243324.32\n"}, "random_source": {}}, "description": "# Description\n<p>Write&nbsp; a program to read a list containing item name, item code, and cost interactively and produce a three column output satisfied:<br />\r\n&nbsp;</p>\r\n<ol>\r\n    <li>name and code are left-justified</li>\r\n    <li>cost is right-justified with a precision of two digits, Trailing zeros are shown</li>\r\n    <li>the size&nbsp; for each item ocupatation are 15, 15, 10</li>\r\n</ol>\r\n<p>&nbsp;</p>\n# Input\n<p>First Line is an interger N to specify the number of books, following with N lines , for each line contains the name ,code and cost.</p>\r\n<p>&nbsp;</p>\n# Output\n<p>for each item output them satisfied the description above</p>\n# Sample_Input\n```\n3\r\nbook1 2312123 342.13\r\nbook2 342 123\r\nbook3 342 1.2321\r\n\n```\n# Sample_Ouput\n```\nbook1          2312123            342.13\r\nbook2          342                123.00\r\nbook3          342                  1.23\r\n\n```\n# Hint\n<p>the code is of string type</p>\r\n<p>&nbsp;</p>\n", "config": {"compilers": {"c++": {"command": "g++ CODE_FILES -g -w -lm -std=c++14 -o OUTPUT_PROGRAM", "version": "default"}, "clang": {"command": "clang CODE_FILES -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}, "clang++": {"command": "clang++ CODE_FILES -g -w -lm -std=c++11 -o OUTPUT_PROGRAM", "version": "default"}, "c": {"command": "gcc CODE_FILES -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}}, "submission": ["source.cpp"], "standard": {"support": [], "hidden_support": [], "standard_input": ["standard_input0", "standard_input1"], "standard_output": ["standard_output0", "standard_output1"], "random_source": []}, "google tests info": {}, "limits": {"time": 1000, "memory": 32}, "random": {"compile_command": "gcc SOURCE -w -std=c++14 -o random", "run_times": 0}, "standard_score": 100, "language": ["c++"], "output_program": "main.exe", "exec_flag": "--gtest_output=xml:/tmp/Result.xml", "grading": {"static check": 20, "memory check": 0, "standard tests": 70, "google tests": 0, "google tests detail": {}, "compile check": 10, "random tests": 0}, "entry_point": "standard_main.exe", "standard_language": "c++"}}