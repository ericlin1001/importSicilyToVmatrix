{"title": "From Sicily::2348 - STL::1005::Template Specification", "description": "# Template Specification\n\n# Description\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u51fd\u6570\u58f0\u660e\u5982\u4e0b bool cmp( T a, T b )\u3002</p>\r\n<p>\u8be5\u51fd\u6570\u6bd4\u8f83\u53d8\u91cf a \u548c b \u5927\u5c0f\uff0c\u5982\u679ca\u7b49\u4e8eb\uff0c\u8fd4\u56detrue\uff1b\u5426\u5219\u8fd4\u56defalse\u3002</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \uff081\uff09 \u5982\u679ca, b\u7684\u7c7b\u578b\u662f int, float, double, char*&nbsp;\u6216 string&nbsp;\u51fd\u6570cmp \u6bd4\u8f83\u7684\u662f a, b \u503c\u7684\u5927\u5c0f\uff1b</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \uff08\u6ce8\u610fchar*\u5b57\u7b26\u4e32\u7684\u6bd4\u8f83\u8bf7\u4f7f\u7528\u51fd\u6570strcmp\uff08\u5934\u6587\u4ef6string.h\uff09\uff09</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; \uff082\uff09\u5982\u679ca, b\u7684\u7c7b\u578b\u662f\u6307\u9488\uff0c\u5219\u6bd4\u8f83\u7684\u662f\u5176\u6240\u6307\u5411\u7684\u5bf9\u8c61\u662f\u5426\u76f8\u7b49\u3002</p>\n\n# Input\n<p>&nbsp;int aInt = 1, bInt = 2 ;<br />\r\n&nbsp;double aDouble = 3.0, bDouble = 3.0 ;<br />\r\n&nbsp;char aChars[5] = &quot;haha&quot;, bChars[5] ;<br />\r\n&nbsp;string aStr = &quot;haha&quot;, bStr = &quot;aha&quot; ;<br />\r\n&nbsp;int* aIntPtr = &amp;aInt, *bIntPtr = &amp;bInt ;</p>\r\n<p>&nbsp;cout &lt;&lt; boolalpha &lt;&lt; cmp( aInt, bInt ) &lt;&lt; endl ;<br />\r\n&nbsp;cout &lt;&lt; cmp( aDouble, bDouble ) &lt;&lt; endl ;</p>\r\n<p>&nbsp;strcpy( bChars, aChars ) ;<br />\r\n&nbsp;cout &lt;&lt; cmp( aChars, bChars ) &lt;&lt; endl ;<br />\r\n&nbsp;cout &lt;&lt; cmp( aStr, bStr ) &lt;&lt; endl ;<br />\r\n&nbsp;cout &lt;&lt; cmp( aIntPtr, bIntPtr ) &lt;&lt; endl ;</p>\n\n# Output\n<p>false<br />\r\ntrue<br />\r\ntrue<br />\r\nfalse<br />\r\nfalse</p>\n\n# Sample_Input\n```\n\n```\n\n# Sample_Ouput\n```\n\n```\n\n# Hint\n\n\n", "config": {"grading": {"standard tests": 70, "google tests detail": {}, "memory check": 0, "static check": 20, "compile check": 10, "google tests": 0, "random tests": 0}, "submission": ["source.h"], "output_program": "main.exe", "language": ["c++"], "google tests info": {}, "entry_point": "standard_main.exe", "random": {"run_times": 0, "compile_command": "gcc SOURCE -w -std=c++14 -o random"}, "standard": {"standard_input": ["standard_input0"], "random_source": [], "standard_output": ["standard_output0"], "support": ["framework.cpp"], "hidden_support": []}, "limits": {"memory": 32, "time": 1000}, "standard_score": 100, "compilers": {"clang++": {"version": "default", "command": "clang++ framework.cpp -g -w -lm -std=c++11 -o OUTPUT_PROGRAM"}, "c": {"version": "default", "command": "gcc framework.cpp -g -w -lm -o OUTPUT_PROGRAM"}, "c++": {"version": "default", "command": "g++ framework.cpp -g -w -lm -std=c++14 -o OUTPUT_PROGRAM"}, "clang": {"version": "default", "command": "clang framework.cpp -g -w -lm -o OUTPUT_PROGRAM"}}, "standard_language": "c++", "exec_flag": "--gtest_output=xml:/tmp/Result.xml"}, "files": {"submission": {"source.h": "#include <iostream>\n#include <cstring>\n#include <string>\nusing namespace std;\n\n\nbool my_equal(const char*, const char*);\nbool my_equal(const int*, const int*);\nbool my_equal(const float*, const float*);\nbool my_equal(const double*, const double*);\nbool my_equal(const int a, const int b) {\n\treturn a == b;\n}\nbool my_equal(const string a, const string b) {\n\treturn a == b;\n}\nbool my_equal(const float a, const float b) {\n\treturn a == b;\n}\nbool my_equal(const double a, const double b) {\n\treturn a == b;\n}\nbool my_equal(const string* a, const string* b) {\n\treturn *a == *b;\n}\n\ntemplate<class T>\nbool cmp(const T a, const T b) {\n\treturn my_equal(a, b);\n}\n\nbool my_equal(const char* s1, const char* s2) {\n\tif (strcmp(s1, s2) == 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\nbool my_equal(const int* a, const int* b) {\n\treturn *a == *b;\n}\n\nbool my_equal(const float* a, const float* b) {\n\treturn *a == *b;\n}\n\nbool my_equal(const double* a, const double* b) {\n\treturn *a == *b;\n}\n\n"}, "hidden_support": {}, "standard_input": {"standard_input0": "false\nfalse\ntrue\ntrue\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\ntrue\ntrue\ntrue\nfalse\n"}, "standard_output": {"standard_output0": "false\nfalse\ntrue\ntrue\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\ntrue\ntrue\ntrue\nfalse\n"}, "random_source": {}, "support": {"framework.cpp": "#include <iostream>\n#include <cstring>\n#include \"source.h\"\n\nusing namespace std ;\n\nint main()\n{\n\tint aInt = 1, bInt = 2 ;\n\tfloat aFloat = 1.0, bFloat = 2.0 ;\n\tdouble aDouble = 3.0, bDouble = 3.0 ;\n\tchar aChars[5] = \"haha\", bChars[5] ; \n\tstring aStr = \"lala\", bStr = \"lal\" ;\n\t\n\tint\t*aIntPtr = &aInt, *bIntPtr = &bInt ;\n\tfloat *aFloatPtr = &aFloat, *bFloatPtr = &bFloat ;\n\tdouble *aDoublePtr = &aDouble, *bDoublePtr = &bDouble ;\n\tstring *aStrPtr = &aStr, *bStrPtr = &bStr ;\n\t\n\tcout << boolalpha << cmp( aInt, bInt ) << endl ;\n\tcout << cmp( aIntPtr, bIntPtr ) << endl ;\n\taInt = bInt = 4 ;\n\tcout << cmp( aInt, bInt ) << endl ;\n\tcout << cmp( aIntPtr, bIntPtr ) << endl ;\n\t\n\tcout << cmp( aFloat, bFloat ) << endl  ;\n\tcout << cmp( aFloatPtr, bFloatPtr ) << endl ;\n\taFloat = bFloat = 3 ;\n\tcout << cmp( aFloat, bFloat ) << endl  ;\n\tcout << cmp( aFloatPtr, bFloatPtr ) << endl ;\n\n\tcout << cmp( aDouble, bDouble ) << endl ;\n\tcout << cmp( aDoublePtr, bDoublePtr ) << endl ;\n\taDouble = bDouble - 1 ;\n\tcout << cmp( aDouble, bDouble ) << endl ;\n\tcout << cmp( aDoublePtr, bDoublePtr ) << endl ;\n\n\tcout << cmp( aStr, bStr )  << endl ;\n\tcout << cmp( aStrPtr, bStrPtr ) << endl ;\n\tbStr += \"a\" ;\n\tcout << cmp( aStr, bStr ) << endl ;\n\tcout << cmp( aStrPtr, bStrPtr ) << endl ;\n\t\n\tstrcpy( bChars, aChars ) ;\n\tcout << cmp( aChars, bChars ) << endl ;\n\tstrcpy( bChars, \"hala\" ) ;\n\tcout << cmp( aChars, bChars ) << endl ;\n\n\treturn 0 ;\n}"}}, "ptype_id": 0}