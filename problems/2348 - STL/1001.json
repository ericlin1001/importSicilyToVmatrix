{"ptype_id": 0, "title": "From Sicily::2348 - STL::1001::Set", "files": {"submission": {"source.h": "#include <iostream>\n#include <set>\nusing namespace std;\nint sumOfIntersection(const set<int>& set1, const set<int>& set2);\n\nint sumOfIntersection(const set<int>& set1, const set<int>& set2) {\n\tset<int>::iterator i;\n\tint total = 0;\n\tfor (i = set2.begin(); i != set2.end(); ++i) {\n\t\tif (set1.find(*i) != set1.end()) {\n\t\t\ttotal += *i;\n\t\t}\n\t}\n\treturn total;\n}\n\n"}, "standard_output": {"standard_output0": "9\n1 2 3 5 6 9 10 20 30 \n14\n1 2 3 5 6 7 8 9 10 12 15 19 20 31 \n56\n"}, "standard_input": {"standard_input0": "10 2 3 2 5 1 6 9 10 20 30 \n15 2 3 12 15 1 6 9 10 20 31 8 7 6 5 19\n"}, "random_source": {}, "hidden_support": {}, "support": {"framework.cpp": "#include<iostream>\n#include<string>\n#include<set>\n#include<algorithm>\nusing namespace std;\n\n\n#include \"source.h\"\n\nint main()\n{\n\t//freopen(\"test01.in\", \"r\", stdin);\n\t//freopen(\"test01.out\", \"w\", stdout);\n\n\tset<int> s1,s2;\n\tint n,k;\n\tcin>>n;\n\twhile(n--) {\n\t\tcin>>k;\n\t\ts1.insert(k);\n\t}\n\tcin>>n;\n\twhile(n--) {\n\t\tcin>>k;\n\t\ts2.insert(k);\n\t}\n\tcout<<s1.size()<<endl;\n\tfor(set<int>::iterator i=s1.begin();i!=s1.end();i++) {\n\t\tcout<<*i<<' ';\n\t}\n\tcout<<endl;\n\tcout<<s2.size()<<endl;\n\tfor(set<int>::iterator i=s2.begin();i!=s2.end();i++) {\n\t\tcout<<*i<<' ';\n\t}\n\tcout<<endl;\n\tcout<<sumOfIntersection(s1,s2)<<endl;\n\n\treturn 0;\n}"}}, "config": {"exec_flag": "--gtest_output=xml:/tmp/Result.xml", "entry_point": "standard_main.exe", "submission": ["source.h"], "standard_language": "c++", "limits": {"time": 1000, "memory": 32}, "standard_score": 100, "grading": {"google tests": 0, "google tests detail": {}, "static check": 20, "random tests": 0, "memory check": 0, "compile check": 10, "standard tests": 70}, "output_program": "main.exe", "google tests info": {}, "standard": {"hidden_support": [], "support": ["framework.cpp"], "standard_output": ["standard_output0"], "standard_input": ["standard_input0"], "random_source": []}, "language": ["c++"], "random": {"compile_command": "gcc SOURCE -w -std=c++14 -o random", "run_times": 0}, "compilers": {"clang++": {"version": "default", "command": "clang++ framework.cpp -g -w -lm -std=c++11 -o OUTPUT_PROGRAM"}, "c++": {"version": "default", "command": "g++ framework.cpp -g -w -lm -std=c++14 -o OUTPUT_PROGRAM"}, "clang": {"version": "default", "command": "clang framework.cpp -g -w -lm -o OUTPUT_PROGRAM"}, "c": {"version": "default", "command": "gcc framework.cpp -g -w -lm -o OUTPUT_PROGRAM"}}}, "description": "# Set\n\n# Description\n<div>&nbsp;</div>\r\n<div style=\"text-indent: 21pt\"><font size=\"3\">Please implement the function&nbsp;<span style=\"color: #0000ff\">int sumOfIntersection(const set&lt;int&gt;&amp; set1, const set&lt;int&gt;&amp; set2)</span>, which&nbsp;returns the sum of all the elements that both appear in set1 and set2.</font></div>\r\n<div>&nbsp;</div>\r\n<div style=\"text-indent: 21pt\"><font size=\"3\">Your submitted source code should&nbsp;include the implementation of the sumOfIntersection function.</font></div>\r\n<div style=\"text-indent: 21pt\"><font size=\"3\">No main() function should be included.</font></div>\r\n<p>&nbsp;</p>\n\n# Input\n\n\n# Output\n\n\n# Sample_Input\n```\nset1: 1 3 5\r\nset2: 1\n```\n\n# Sample_Ouput\n```\n1\n```\n\n# Hint\n\n\n"}