{"title": "From Sicily::2348 - STL::1000::Class  Set", "config": {"grading": {"standard tests": 70, "memory check": 0, "random tests": 0, "google tests detail": {}, "compile check": 10, "static check": 20, "google tests": 0}, "standard_score": 100, "compilers": {"clang++": {"version": "default", "command": "clang++ framework.cpp -g -w -lm -std=c++11 -o OUTPUT_PROGRAM"}, "c++": {"version": "default", "command": "g++ framework.cpp -g -w -lm -std=c++14 -o OUTPUT_PROGRAM"}, "c": {"version": "default", "command": "gcc framework.cpp -g -w -lm -o OUTPUT_PROGRAM"}, "clang": {"version": "default", "command": "clang framework.cpp -g -w -lm -o OUTPUT_PROGRAM"}}, "limits": {"memory": 32, "time": 1000}, "exec_flag": "--gtest_output=xml:/tmp/Result.xml", "google tests info": {}, "random": {"run_times": 0, "compile_command": "gcc SOURCE -w -std=c++14 -o random"}, "standard_language": "c++", "entry_point": "standard_main.exe", "standard": {"support": ["framework.cpp"], "hidden_support": [], "standard_output": ["standard_output0"], "standard_input": ["standard_input0"], "random_source": []}, "language": ["c++"], "output_program": "main.exe", "submission": ["source.h"]}, "files": {"standard_output": {"standard_output0": "Items in s1 are : 1 2 4 \nItems in s2 are: 3 1 2 \nItems in s_plus are: 1 2 4 3 \nItems in s_minus are: 4 \nItems in s_intersection are: 1 2 \nItems in s1 are : 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \nItems in s2 are: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \nItems in s_plus are: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \nItems in s_minus are: 15 16 \nItems in s_intersection are: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \nItems in s1 are : a d s f h j g l c n v y e r w q t o i u b 3 2 4 5 \nItems in s2 are: a d s f h u q w e r n j t i v g b   . , p [ o \nItems in s_plus are: a d s f h j g l c n v y e r w q t o i u b 3 2 4 5   . , p [ \nItems in s_minus are: l c y 3 2 4 5 \nItems in s_intersection are: a d s f h j g n v e r w q t o i u b \n"}, "random_source": {}, "hidden_support": {}, "support": {"framework.cpp": "#include <iostream>\n#include <string.h>\n#include \"source.h\"\n\nusing namespace std ;\n\n//test operator + and operator - and intersection\nvoid test1()\n{\n\tSet<int> s1( 10 ), s2( 10 ), s_plus, s_minus, s_intersection ;\n\t\n\ts1.insert( 1 ) ;\n\ts1.insert( 2 ) ;\n\ts1.insert( 2 ) ;\n\ts1.insert( 4 ) ;\n\tcout << \"Items in s1 are : \" ;\n\ts1.print() ;\n\t\n\ts2.insert( 3 ) ;\n\ts2.insert( 3 ) ;\n\ts2.insert( 1 ) ;\n\ts2.insert( 2 ) ;\n\tcout << \"Items in s2 are: \" ;\n\ts2.print() ;\n\t\n\ts_plus = s1 + s2 ;\n\tcout << \"Items in s_plus are: \" ;\n\ts_plus.print() ;\n\t\n\ts_minus = s1 - s2 ;\n\tcout << \"Items in s_minus are: \" ;\n\ts_minus.print() ;\n\t\n\ts_intersection = s1 - ( s1 - s2 ) ;\n\tcout << \"Items in s_intersection are: \" ;\n\ts_intersection.print() ;\n}\n\nvoid test2()\n{\n\tSet<double> s1( 100 ), s2( 100 ), s_plus, s_minus, s_intersection ;\n\t\n\t\n\tfor ( int i = 0; i < s1.getMaxSize(); i++ )\n\t{\n\t\ts1.insert( i % 17 ) ;\n\t}\n\tcout << \"Items in s1 are : \" ;\n\ts1.print() ;\n\tfor ( int i = 0; i < s2.getMaxSize(); i++ )\n\t{\n\t\ts2.insert( i % 15 ) ;\n\t}\n\tcout << \"Items in s2 are: \" ;\n\ts2.print() ;\n\t\n\ts_plus = s1 + s2 ;\n\tcout << \"Items in s_plus are: \" ;\n\ts_plus.print() ;\n\t\n\ts_minus = s1 - s2 ;\n\tcout << \"Items in s_minus are: \" ;\n\ts_minus.print() ;\n\t\n\ts_intersection = s1 - ( s1 - s2 ) ;\n\tcout << \"Items in s_intersection are: \" ;\n\ts_intersection.print() ;\n}\n\nvoid test3()\n{\n\tSet<char> s1( 1000 ), s2( 1000 ), s_plus, s_minus, s_intersection ;\n\tconst char str1[] = \"adsfasdfasdfasdfdshfhasdfashjglcnvyerwqjtoiruetwertbnsdfosiftgwertiu324u54owert\" ;\n\tconst char str2[] = \"adsfhahdfuqwernfqwjerfqwhtfihvagiutewrfbnsduasdfqwerqwgb ahb.,p[phvbfgiopsudfgsdafjfas\" ;\n\t\n\tfor ( int i = 0; i < strlen( str1 ); i++ )\n\t{\n\t\ts1.insert( str1[i] ) ;\n\t}\n\tcout << \"Items in s1 are : \" ;\n\ts1.print() ;\n\tfor ( int i = 0; i < strlen( str2 ); i++ )\n\t{\n\t\ts2.insert( str2[i] ) ;\n\t}\n\tcout << \"Items in s2 are: \" ;\n\ts2.print() ;\n\t\n\t\ts_plus = s1 + s2 ;\n\tcout << \"Items in s_plus are: \" ;\n\ts_plus.print() ;\n\t\n\ts_minus = s1 - s2 ;\n\tcout << \"Items in s_minus are: \" ;\n\ts_minus.print() ;\n\t\n\ts_intersection = s1 - ( s1 - s2 ) ;\n\tcout << \"Items in s_intersection are: \" ;\n\ts_intersection.print() ;\n}\n\nint main()\n{\n\ttest1() ;\n\ttest2() ;\n\ttest3() ;\n\treturn 0 ;\n}"}, "standard_input": {"standard_input0": "Items in s1 are : 1 2 4 \nItems in s2 are: 3 1 2 \nItems in s_plus are: 1 2 4 3 \nItems in s_minus are: 4 \nItems in s_intersection are: 1 2 \nItems in s1 are : 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \nItems in s2 are: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \nItems in s_plus are: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \nItems in s_minus are: 15 16 \nItems in s_intersection are: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \nItems in s1 are : a d s f h j g l c n v y e r w q t o i u b 3 2 4 5 \nItems in s2 are: a d s f h u q w e r n j t i v g b   . , p [ o \nItems in s_plus are: a d s f h j g l c n v y e r w q t o i u b 3 2 4 5   . , p [ \nItems in s_minus are: l c y 3 2 4 5 \nItems in s_intersection are: a d s f h j g n v e r w q t o i u b \n"}, "submission": {"source.h": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\ntemplate< typename T >\nclass Set {\n\tpublic:\n\t\tSet();//\n\t\tSet(int maxSize);//\n\t\t~Set();//\n\t\tSet(const Set&);//\n\t\tSet operator+(const Set& s);\n\t\tSet operator-(const Set& s );\n\t\tvoid operator=(const Set& s);//\n\t\tbool insert(T newItem);//\n\t\tbool erase(T targetItem);//\n\t\tvoid print() const;//\n\t\tT* getData() const; //\n\t\tint getCount() const;//\n\t\tint getMaxSize() const;//\n\tprivate:\n\t\tint count;\n\t\tint maxSize;\n\t\tT* data;\n};\ntemplate<class T>\nSet<T> Set<T>::operator+(const Set& s) {\n\tSet s0(count + s.count);\n\tfor (int i = 0; i < count; ++i) {\n\t\ts0.insert(data[i]);\n\t}\n\tfor (int i = 0; i < s.count; ++i) {\n\t\ts0.insert(s.data[i]);\n\t}\n\n\treturn s0;\n}\n\ntemplate<class T>\nSet<T> Set<T>::operator-(const Set& s) {\n\tSet s0(count);\n\tfor (int i = 0; i < count; ++i) {\n\t\ts0.insert(data[i]);\n\t}\n\tfor (int i = 0; i < s.count; ++i) {\n\t\ts0.erase(s.data[i]);\n\t}\n\treturn s0;\n}\n\ntemplate<class T>\nSet<T>::Set() {\n\tdata = new T[32];\n\tint maxSize = 32;\n\tcount = 0;\n}\ntemplate<class T>\nSet<T>::Set(int maxSize) {\n\tthis -> maxSize = maxSize;\n\tcount = 0;\n\tdata = new T[maxSize];\n}\ntemplate<class T>\nSet<T>::Set(const Set& other) {\n\tcount = other.count;\n\tmaxSize = other.maxSize;\n\tif (data)\n\t\tdelete [] data;\n\tdata = new T[maxSize];\n\tfor (int i = 0; i < count; ++i) {\n\t\tdata[i] = other.data[i];\n\t}\n}\ntemplate<class T>\nvoid Set<T>::operator=(const Set& other) {\n\tcount = other.count;\n\tmaxSize = other.maxSize;\n\tif (data)\n\t\tdelete [] data;\n\tdata = new T[maxSize];\n\tfor (int i = 0; i < count; ++i) {\n\t\tdata[i] = other.data[i];\n\t}\n}\ntemplate<class T>\nbool Set<T>::insert(T newItem) {\n\tfor (int i = 0; i < count; ++i) {\n\t\tif ((data[i] < newItem) == false && (newItem < data[i]) == false)\n\t\t\treturn false;\n\t}\n\tif (count < maxSize) {\n\t\t++count;\n\t\tdata[count - 1] = newItem;\n\t} else {\n\t\tmaxSize *= 2;\n\t\tT* data_mid = new T[maxSize];\n\t\tfor (int i = 0; i < count; ++i) {\n\t\t\tdata_mid[i] = data[i];\n\t\t}\n\t\tdelete [] data;\n\t\tdata = data_mid;\n\t\t++count;\n\t\tdata[count - 1] = newItem;\n\t}\n\treturn true;\n}\ntemplate<class T>\nbool Set<T>::erase(T targetItem) {\n\tint index = -1;\n\tfor (int i = 0; i < count; ++i) {\n\t\tif ((data[i] < targetItem) == false && (targetItem < data[i]) == false) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (index != -1) {\n\t\tfor (int i = index; i < count - 1; ++i) {\n\t\t\tdata[i] = data[i + 1];\n\t\t}\n\t\t--count;\n\t\treturn true;\n\t} else\n\t\treturn false;\n}\ntemplate<class T>\nSet<T>::~Set() {\n\tif (data)\n\t\tdelete [] data;\n}\ntemplate<class T>\nT* Set<T>::getData() const {\n\treturn data;\n}\ntemplate<class T>\nint Set<T>::getCount() const {\n\treturn count;\n}\ntemplate<class T>\nint Set<T>::getMaxSize() const {\n\treturn maxSize;\n}\ntemplate<class T>\nvoid Set<T>::print() const {\n\tfor (int i = 0; i < count; ++i) {\n\t\tcout << data[i] << \" \";\n\t}\n\tcout << endl;\n}\n\n"}}, "ptype_id": 0, "description": "# Class  Set\n\n# Description\n<p>\u8bbe\u8ba1\u4e00\u4e2a\u96c6\u5408(Set)\u7c7b\u6a21\u677f\uff0cSet\u53ef\u4ee5\u5305\u542b<strong>\u96f6\u4e2a</strong>\u6216<strong>\u591a\u4e2a\u65e0\u5e8f\u7684\u975e\u91cd\u590d</strong>\u5143\u7d20\u3002</p>\r\n<p>\u516c\u5171\u63a5\u53e3\u5305\u542b\u4ee5\u4e0b\u6210\u5458\u51fd\u6570\uff1a</p>\r\n<p>1. \u521b\u5efa\u4e00\u4e2aSet\uff1b</p>\r\n<p>2. \u589e\u52a0\u4e00\u4e2a\u65b0\u5143\u7d20\u5230Set\uff1b</p>\r\n<p>3.\u4eceSet\u4e2d\u5220\u9664\u4e00\u4e2a\u5143\u7d20</p>\r\n<p>4.\u5217\u4e3eSet\u4e2d\u7684\u6240\u6709\u5143\u7d20</p>\r\n<p>5. s1\u548cs2\u90fd\u662fSet\u7684\u5bf9\u8c61\uff0c\u8ba1\u7b97\u5b83\u4eec\u7684\u5e76\u96c6\uff08s1 + s2\uff09= { x | x \u5c5e\u4e8e s1 \u6216 x \u5c5e\u4e8e s2 }</p>\r\n<p>6. s1\u548cs2\u90fd\u662fSet\u7684\u5bf9\u8c61\uff0c\u8ba1\u7b97\u5b83\u4eec\u7684\u5dee\u96c6\uff08s1 - s2 ) = { x | x \u5c5e\u4e8e&nbsp;s1 \u4e14 x \u4e0d\u5c5e\u4e8e s2 }</p>\r\n<p>&nbsp;</p>\r\n<p>\u8be5\u7c7b\u6a21\u677f\u7684\u58f0\u660e\u5982\u4e0b\uff1a</p>\r\n<p><strong>template</strong>&lt; <strong>typename </strong>T &gt;<br />\r\n<strong>class </strong>Set<br />\r\n{<br />\r\n<strong>public</strong>:<br />\r\n&nbsp;Set() ;<br />\r\n&nbsp;Set( <strong>int </strong>maxSize ) ;<br />\r\n&nbsp;~Set() ;<br />\r\n&nbsp;Set( <strong>const </strong>Set&amp; ) ;<br />\r\n&nbsp;Set <strong>operator</strong>+( <strong>const </strong>Set&amp; s ) ;<br />\r\n&nbsp;Set <strong>operator</strong>-( <strong>const </strong>Set&amp; s ) ;<br />\r\n&nbsp;<strong>void operator</strong>=( <strong>const </strong>Set&amp; s ) ;<br />\r\n&nbsp;<strong>bool </strong>insert( T newItem ) ;<br />\r\n&nbsp;<strong>bool </strong>erase( T targetItem ) ;<br />\r\n&nbsp;<strong>void </strong>print() <strong>const </strong>;<br />\r\n&nbsp;T* getData() <strong>const </strong>;<br />\r\n&nbsp;<strong>int </strong>getCount() <strong>const </strong>;<br />\r\n&nbsp;<strong>int </strong>getMaxSize() <strong>const </strong>;<br />\r\n<strong>private</strong>:<br />\r\n&nbsp;<strong>int </strong>count ;<br />\r\n&nbsp;<strong>int </strong>maxSize ;<br />\r\n&nbsp;T* data ;<br />\r\n} ;</p>\n\n# Input\n<p>&nbsp;Set&lt;<strong>int</strong>&gt; s1( 10 ), s2( 10 ), s_plus, s_minus ;<br />\r\n&nbsp;<br />\r\n&nbsp;s1.insert( 1 ) ;<br />\r\n&nbsp;s1.insert( 2 ) ;<br />\r\n&nbsp;s1.insert( 2 ) ;<br />\r\n&nbsp;s1.insert( 4 ) ;<br />\r\n&nbsp;cout &lt;&lt; &quot;Items in s1 are : &quot; ;<br />\r\n&nbsp;s1.print() ;<br />\r\n&nbsp;<br />\r\n&nbsp;s2.insert( 3 ) ;<br />\r\n&nbsp;s2.insert( 3 ) ;<br />\r\n&nbsp;s2.insert( 1 ) ;<br />\r\n&nbsp;s2.insert( 2 ) ;<br />\r\n&nbsp;cout &lt;&lt; &quot;Items in s2 are: &quot; ;<br />\r\n&nbsp;s2.print() ;<br />\r\n&nbsp;<br />\r\n&nbsp;s_plus = s1 + s2 ;<br />\r\n&nbsp;cout &lt;&lt; &quot;Items in s_plus are: &quot; ;<br />\r\n&nbsp;s_plus.print() ;<br />\r\n&nbsp;<br />\r\n&nbsp;s_minus = s1 - s2 ;<br />\r\n&nbsp;cout &lt;&lt; &quot;Items in s_minus are: &quot; ;<br />\r\n&nbsp;s_minus.print() ;</p>\n\n# Output\n<p>Items in s1 are : 1 2 4 <br />\r\nItems in s2 are: 3 1 2 <br />\r\nItems in s_plus are: 1 2 4 3 <br />\r\nItems in s_minus are: 4</p>\r\n<p>&nbsp;</p>\n\n# Sample_Input\n```\n\n```\n\n# Sample_Ouput\n```\n\n```\n\n# Hint\n<p>\u63d0\u4ea4\u7684\u4ee3\u7801\u4e2d\uff0c\u8bf7\u4e0d\u8981\u5305\u542bmain()\u51fd\u6570</p>\n\n"}