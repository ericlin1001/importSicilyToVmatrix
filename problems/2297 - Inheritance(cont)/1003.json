{"files": {"standard_output": {"standard_output0": "In B()\nIn C()\nIn B()\nIn A()\nIn D()\nIn ~D()\nIn ~A()\nIn ~B()\nIn ~C()\nIn ~B()\n"}, "standard_input": {"standard_input0": ""}, "submission": {"source.h": "class B {\n\tpublic:\n\t\tB() {\n\t\t\tcout << \"In B()\" << endl;\n\t\t}\n\t\t~B() {\n\t\t\tcout << \"In ~B()\" << endl;\n\t\t}\n};\n\nclass C: public B {\n\tpublic:\n\t\tC() {\n\t\t\tcout << \"In C()\" << endl;\n\t\t}\n\t\t~C() {\n\t\t\tcout << \"In ~C()\" << endl;\n\t\t}\n};\n\nclass A: public B {\n\tpublic:\n\t\tA() {\n\t\t\tcout << \"In A()\" << endl;\n\t\t}\n\t\t~A() {\n\t\t\tcout << \"In ~A()\" << endl;\n\t\t}\n};\n\nclass D: public C, public A {\n\tpublic:\n\t\tD() {\n\t\t\tcout << \"In D()\" << endl;\n\t\t}\n\t\t~D() {\n\t\t\tcout << \"In ~D()\" << endl;\n\t\t}\n};\n\n"}, "support": {"framework.cpp": "#include <iostream>\nusing namespace std;\n\n#include \"source.h\"\n\nint main()\n{\n//\tfreopen(\"test01.in\", \"r\", stdin);\n//\tfreopen(\"test01.out\", \"w\", stdout);\n    D d;\n    return 0;\n}"}, "random_source": {}, "hidden_support": {}}, "config": {"google tests info": {}, "compilers": {"clang++": {"command": "clang++ framework.cpp -g -w -lm -std=c++11 -o OUTPUT_PROGRAM", "version": "default"}, "c++": {"command": "g++ framework.cpp -g -w -lm -std=c++14 -o OUTPUT_PROGRAM", "version": "default"}, "c": {"command": "gcc framework.cpp -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}, "clang": {"command": "clang framework.cpp -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}}, "submission": ["source.h"], "standard_score": 100, "entry_point": "standard_main.exe", "standard": {"standard_output": ["standard_output0"], "random_source": [], "standard_input": ["standard_input0"], "hidden_support": [], "support": ["framework.cpp"]}, "language": ["c++"], "grading": {"compile check": 10, "memory check": 0, "standard tests": 70, "google tests": 0, "random tests": 0, "google tests detail": {}, "static check": 20}, "limits": {"memory": 32, "time": 1000}, "random": {"run_times": 0, "compile_command": "gcc SOURCE -w -std=c++14 -o random"}, "standard_language": "c++", "exec_flag": "--gtest_output=xml:/tmp/Result.xml", "output_program": "main.exe"}, "description": "# Constructor chains\n\n# Description\n<div>&nbsp;</div>\r\n<div style=\"text-indent: 21pt\"><font size=\"3\">There are four classes A, B, C and D. They all have the&nbsp;same form as follows:&nbsp;</font></div>\r\n<div>&nbsp;</div>\r\n<div><span style=\"color: #0000ff\"><font size=\"3\">class&nbsp;X</font></span></div>\r\n<div><span style=\"color: #0000ff\"><font size=\"3\">{<br />\r\npublic:<br />\r\n&nbsp;&nbsp;&nbsp; X() { cout &lt;&lt; &quot;In X()&quot; &lt;&lt; endl; }<br />\r\n&nbsp;&nbsp;&nbsp; ~X() { cout &lt;&lt; &quot;In ~X()&quot; &lt;&lt; endl; }<br />\r\n};</font></span></div>\r\n<div>&nbsp;</div>\r\n<div style=\"text-indent: 21pt\"><font size=\"3\">X belongs to { A, B, C, D }. These four classes have some kind of inheritance relationship. You are to find the right&nbsp;one to generate the desired output, which should come from the constructors and destructors.&nbsp;</font></div>\r\n<div>&nbsp;</div>\r\n<div style=\"text-indent: 21pt\"><font size=\"3\">Your submitted&nbsp;source code should&nbsp;include all the&nbsp;implementation of the A, B, C and D classes. </font></div>\r\n<div style=\"text-indent: 21pt\"><font size=\"3\">No main() function should be included.</font></div>\r\n<div>&nbsp;</div>\r\n<div><strong><font size=\"3\">Note</font></strong><font size=\"3\">: the main() function of the test framework&nbsp;looks like this: </font></div>\r\n<div><font size=\"3\">------------------------------------------------------------------------------</font></div>\r\n<div><font size=\"3\">int main()<br />\r\n{<br />\r\n&nbsp;&nbsp;&nbsp; D d;<br />\r\n&nbsp;&nbsp;&nbsp; return 0;<br />\r\n}</font></div>\r\n<div><font size=\"3\">------------------------------------------------------------------------------</font></div>\n\n# Input\n\n\n# Output\n<div><font size=\"3\">In B()<br />\r\nIn C()<br />\r\nIn B()<br />\r\nIn A()<br />\r\nIn D()<br />\r\nIn ~D()<br />\r\nIn ~A()<br />\r\nIn ~B()<br />\r\nIn ~C()<br />\r\nIn ~B()</font></div>\n\n# Sample_Input\n```\n\n```\n\n# Sample_Ouput\n```\n\n```\n\n# Hint\n\n\n", "ptype_id": 0, "title": "From Sicily::2297 - Inheritance(cont)::1003::Constructor chains"}