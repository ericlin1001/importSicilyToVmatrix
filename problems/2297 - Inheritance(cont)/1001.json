{"ptype_id": 0, "title": "From Sicily::2297 - Inheritance(cont)::1001::Extending MyPoint class", "files": {"hidden_support": {}, "support": {"framework.cpp": "#include <iostream>\n#include <string>\n#include \"source.h\"\nusing namespace std;\nint main()\n{\n  MyPoint pa1, pa2(1,1);\n  ThreeDPoint pb1, pb2(1,2,3), pb3(10,30,25.5);\n  cout << pa1.distance(pa2) << endl;\n  cout << pb1.distance(pb2) << endl;\n  cout << pb1.distance(pb3) << endl;\n  return 0;\n}\n"}, "random_source": {}, "submission": {"source.h": "#include <iostream>\n#include <iomanip>\n#include <string>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nclass MyPoint {\n\tprivate:\n\t\tdouble x, y;\n\tpublic:\n\t\t// The no-arg constructor that contruccts a point with coordinates(0,0)\n\t\tMyPoint() : x(0),y(0) {}\n\t\tMyPoint(double x, double y) : x(x), y(y) {}\n\t\tdouble getX() const;\n\t\tdouble getY() const;\n\t\t//display the distance between two points in two-dimensional space.\n\t\tdouble distance(const MyPoint &point) {\n\t\t\treturn sqrt((x - point.x)*(x - point.x) + (y - point.y)*(y - point.y));\n\t\t}\n};\n\nclass ThreeDPoint : public MyPoint {\n\tprivate:\n\t\tdouble z;\n\tpublic:\n\t\t// The no-arg constructor that contruccts a point with coordinates(0,0,0)\n\t\tThreeDPoint() : MyPoint(0, 0), z(0) {}\n\n\t\tThreeDPoint(double x, double y, double z) : MyPoint(x, y), z(z) {}\n\t\tdouble getZ() const {\n\t\t\treturn z;\n\t\t}\n\n\t\t//display the distance between two points in Three-dimensional space.\n\t\tdouble distance(const ThreeDPoint &point) {\n\t\t\treturn sqrt((getX()-point.getX())*(getX() - point.getX())+ (getY() - point.getY())*(getY() - point.getY()) +(z-point.z)*(z-point.z));\n\t\t}\n};\ndouble MyPoint::getX() const {\n\treturn x;\n}\n\ndouble MyPoint::getY() const {\n\treturn y;\n}\n\n"}, "standard_output": {"standard_output0": "1.41421\n3.74166\n40.6233\n"}, "standard_input": {"standard_input0": ""}}, "description": "# Description\n<p>The <strong>MyPoint</strong> class below is created to model a point in a two-dimensional space.<br />\r\nCreate a class named <strong>ThreeDPoint</strong> to model a point in a three-dimensional space. Let <strong>ThreeDPoint</strong> be derived from <strong>MyPoint</strong>.<br />\r\nx, y, z represent x-, y- and z-coordinates.<br />\r\nclass MyPoint<br />\r\n{<br />\r\n&nbsp; private:<br />\r\n&nbsp;&nbsp;&nbsp; double x, y;<br />\r\n&nbsp; public:<br />\r\n&nbsp;&nbsp;&nbsp; // The no-arg constructor that contruccts a point with coordinates(0,0)<br />\r\n&nbsp;&nbsp;&nbsp; MyPoint();<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; MyPoint(double x, double y);<br />\r\n&nbsp;&nbsp;&nbsp; double getX() const;<br />\r\n&nbsp;&nbsp;&nbsp; double getY() const;<br />\r\n<br />\r\n&nbsp;&nbsp; &nbsp;//display the distance between two points in two-dimensional space.<br />\r\n&nbsp;&nbsp;&nbsp; double distance(const MyPoint &amp;point); <br />\r\n};<br />\r\n<br />\r\nclass ThreeDPoint : public MyPoint<br />\r\n{<br />\r\nprivate:<br />\r\n&nbsp; double z;<br />\r\npublic:<br />\r\n&nbsp; // The no-arg constructor that contruccts a point with coordinates(0,0,0) &nbsp;<br />\r\n&nbsp; ThreeDPoint();<br />\r\n<br />\r\n&nbsp; ThreeDPoint(double x, double y, double z);<br />\r\n&nbsp; double getZ() const;<br />\r\n<br />\r\n&nbsp; //display the distance between two points in Three-dimensional space.<br />\r\n&nbsp; double distance(const ThreeDPoint &amp;point); &nbsp;<br />\r\n};</p>\r\n<p>&nbsp;</p>\n# Input\n\n# Output\n\n# Sample_Input\n```\n\n```\n# Sample_Ouput\n```\n\n```\n# Hint\n\n", "config": {"grading": {"google tests": 0, "static check": 20, "compile check": 10, "google tests detail": {}, "memory check": 0, "random tests": 0, "standard tests": 70}, "google tests info": {}, "limits": {"memory": 32, "time": 1000}, "language": ["c++"], "random": {"compile_command": "gcc SOURCE -w -std=c++14 -o random", "run_times": 0}, "standard_score": 100, "standard": {"random_source": [], "hidden_support": [], "support": ["framework.cpp"], "standard_output": ["standard_output0"], "standard_input": ["standard_input0"]}, "exec_flag": "--gtest_output=xml:/tmp/Result.xml", "submission": ["source.h"], "standard_language": "c++", "output_program": "main.exe", "compilers": {"c": {"version": "default", "command": "gcc framework.cpp -g -w -lm -o OUTPUT_PROGRAM"}, "c++": {"version": "default", "command": "g++ framework.cpp -g -w -lm -std=c++14 -o OUTPUT_PROGRAM"}, "clang": {"version": "default", "command": "clang framework.cpp -g -w -lm -o OUTPUT_PROGRAM"}, "clang++": {"version": "default", "command": "clang++ framework.cpp -g -w -lm -std=c++11 -o OUTPUT_PROGRAM"}}, "entry_point": "standard_main.exe"}}