{"description": "# Description\n<p><br />\r\nclass Date<br />\r\n{<br />\r\npublic:<br />\r\n&nbsp; Date(int y=0, int m=1, int d=1);&nbsp; <br />\r\n&nbsp; static bool leapyear(int year);<br />\r\n&nbsp; int getYear() const;<br />\r\n&nbsp; int getMonth() const;<br />\r\n&nbsp; int getDay() const;<br />\r\nbool operator&lt;(Date &amp;d);<br />\r\nbool operator&lt;=(Date &amp;d);<br />\r\nbool operator==(Date &amp;d);<br />\r\nbool operator!=(Date &amp;d);<br />\r\nbool operator&gt;(Date &amp;d);<br />\r\nbool operator&gt;=(Date &amp;d);<br />\r\nint &amp;operator[](const string &amp;s);<br />\r\n&nbsp;&nbsp;&nbsp; <br />\r\n&nbsp; // add any member you need here&nbsp; <br />\r\n};<br />\r\nYou implementation should enable the usage like this:<br />\r\n<br />\r\n&nbsp; Date date(2011,4,1);<br />\r\n&nbsp; cout &lt;&lt; date[&quot;year&quot;] &lt;&lt; endl; // output 2011<br />\r\n&nbsp; cout &lt;&lt; date[&quot;month&quot;] &lt;&lt; endl;// output 4<br />\r\n&nbsp; cout &lt;&lt; date[&quot;day&quot;] &lt;&lt; endl; // output 1<br />\r\n&nbsp; date[&quot;year&quot;] = 2007;<br />\r\n&nbsp; date[&quot;month&quot;] = 11;<br />\r\n&nbsp; date[&quot;day&quot;] = 11;<br />\r\n&nbsp; cout &lt;&lt; date[&quot;year&quot;] &lt;&lt; endl; // output 2007<br />\r\n&nbsp; cout &lt;&lt; date[&quot;month&quot;] &lt;&lt; endl;// output 11<br />\r\n&nbsp; cout &lt;&lt; date[&quot;day&quot;] &lt;&lt; endl; // output 11<br />\r\n<br />\r\nWhat to do if the subscript is not one of &quot;year&quot;, &quot;month&quot; or &quot;day&quot;?&nbsp; <br />\r\nDefine a custom exception class named IllegalSubscriptException and let the function operator [] throw an <strong>IllegalSubscriptException</strong> if the subscript is not one of &quot;year&quot;, &quot;month&quot; or &quot;day&quot;.<br />\r\nThe test function f():<br />\r\nvoid f()<br />\r\n{<br />\r\n&nbsp; Date date1(2011,4,1);<br />\r\n&nbsp; try<br />\r\n&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp; cout &lt;&lt; date1[&quot;abc&quot;] &lt;&lt; endl;<br />\r\n&nbsp; }<br />\r\n&nbsp; catch(IllegalSubscriptException ex)<br />\r\n&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp; cout &lt;&lt; &quot;Illegal Subscript Exception&quot; &lt;&lt; endl;&nbsp; <br />\r\n&nbsp; }<br />\r\n<br />\r\n&nbsp; try<br />\r\n&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; date1[&quot;abc&quot;] = 2000;<br />\r\n&nbsp; }<br />\r\n&nbsp; catch(IllegalSubscriptException ex)<br />\r\n&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp; cout &lt;&lt; &quot;Illegal Subscript Exception&quot; &lt;&lt; endl;<br />\r\n&nbsp; }<br />\r\n}<br />\r\nshould output:<br />\r\nIllegal Subscript Exception<br />\r\nIllegal Subscript Exception<br />\r\n&nbsp;</p>\n# Input\n\n# Output\n\n# Sample_Input\n```\n\n```\n# Sample_Ouput\n```\n\n```\n# Hint\n\n", "title": "From Sicily::2340 - Exception::1002:: Modify Date class", "ptype_id": 0, "config": {"limits": {"memory": 32, "time": 1000}, "compilers": {"clang": {"command": "clang framework.cpp -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}, "c": {"command": "gcc framework.cpp -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}, "c++": {"command": "g++ framework.cpp -g -w -lm -std=c++14 -o OUTPUT_PROGRAM", "version": "default"}, "clang++": {"command": "clang++ framework.cpp -g -w -lm -std=c++11 -o OUTPUT_PROGRAM", "version": "default"}}, "random": {"run_times": 0, "compile_command": "gcc SOURCE -w -std=c++14 -o random"}, "standard_score": 100, "grading": {"google tests detail": {}, "compile check": 10, "memory check": 0, "google tests": 0, "static check": 20, "random tests": 0, "standard tests": 70}, "standard_language": "c++", "standard": {"random_source": [], "standard_output": ["standard_output0"], "standard_input": ["standard_input0"], "support": ["framework.cpp"], "hidden_support": []}, "entry_point": "standard_main.exe", "output_program": "main.exe", "exec_flag": "--gtest_output=xml:/tmp/Result.xml", "google tests info": {}, "submission": ["source.h"], "language": ["c++"]}, "files": {"random_source": {}, "hidden_support": {}, "submission": {"source.h": "#include <iostream>\n#include <cstring>\n#include <stdexcept>\nusing namespace std;\nclass IllegalSubscriptException {\n\tpublic:\n\t\tIllegalSubscriptException(char* s) {}\n};\nclass Date {\n\tprivate:\n\t\tint year;\n\t\tint month;\n\t\tint day;\n\tpublic:\n\t\tDate(int y=0, int m=1, int d=1) {\n\t\t\tthis->year = y;\n\t\t\tthis->month = m;\n\t\t\tthis->day = d;\n\t\t}\n\t\tstatic bool leapyear(int year) {\n\t\t\tif(year % 400 == 0) {\n\t\t\t\treturn true;\n\t\t\t} else if(year % 100 != 0 && year % 4 == 0) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tint getYear() const {\n\t\t\treturn this->year;\n\t\t}\n\t\tint getMonth() const {\n\t\t\treturn this->month;\n\t\t}\n\t\tint getDay() const {\n\t\t\treturn this->day;\n\t\t}\n\t\tbool operator<(Date &d) {\n\t\t\tif(this->year < d.year) {\n\t\t\t\treturn true;\n\t\t\t} else if(this->year == d.year && this->month < d.month) {\n\t\t\t\treturn true;\n\t\t\t} else if((this->year == d.year) && (this->month == d.month) && (this->day < d.day)) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tbool operator<=(Date &d) {\n\t\t\tif(this->year < d.year) {\n\t\t\t\treturn true;\n\t\t\t} else if(this->year == d.year && this->month < d.month) {\n\t\t\t\treturn true;\n\t\t\t} else if((this->year == d.year) && (this->month == d.month )&& (this->day <= d.day)) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tbool operator==(Date &d) {\n\t\t\tif((this->year == d.year) && (this->month == d.month) && (this->day = d.day)) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tbool operator!=(Date &d) {\n\t\t\treturn !(*this == d);\n\t\t}\n\t\tbool operator>(Date &d) {\n\t\t\treturn !(*this <= d);\n\t\t}\n\t\tbool operator>=(Date &d) {\n\t\t\treturn !(*this < d);\n\t\t}\n\t\tint &operator[](const string &s) {\n\t\t\tif(s == \"year\" || s == \"month\" || s == \"day\") {\n\t\t\t\tif(s == \"year\") {\n\t\t\t\t\treturn this->year;\n\t\t\t\t} else if(s == \"month\") {\n\t\t\t\t\treturn this->month;\n\t\t\t\t} else {\n\t\t\t\t\treturn this->day;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow IllegalSubscriptException(\"Illegal Subscript Exception\");\n\t\t\t}\n\t\t}\n\n};\n\n"}, "standard_input": {"standard_input0": ""}, "support": {"framework.cpp": "#include<iostream>\n#include<string>\n#include\"source.h\"\nusing namespace std;\n\nostream& operator<<(ostream& os, const Date& date)\n{\n  os << date.getYear() << \"-\" << date.getMonth() << \"-\" << date.getDay();\n  return os;\n}\n\n/* \nf1() test for:\n  constructor, copy constructor, assign assignment\n  static member function leapyear()\n  operator ==, !=, <, <=, >, >=\n*/\nvoid f1()\n{\n  Date date1, date2(2003,1,1);\n  Date date3 = Date(2007,2,28);\n  cout << \"date1: \" << date1 << endl;\n  cout << \"date2: \" << date2 << endl;\n  \n  cout << \"date3 after copy constructor: \" << date3 << endl;\n  date3 = date1;\n  cout << \"date3 after copy asignment: \" << date3 << endl;  \n\n  cout << \"year 1996 is leap year? \" << Date::leapyear(1996) << endl;\n  cout << \"year 1200 is leap year? \" << Date::leapyear(1200) << endl;\n  cout << \"year 1300 is leap year? \" << Date::leapyear(1300) << endl;\n  cout << \"year 1999 is leap year? \" << Date::leapyear(1999) << endl;\n\n  cout <<  \"(date1==date3)? \" << (date1==date3) << endl;\n  cout <<  \"(date1!=date3)? \" << (date1!=date3) << endl;\n  cout <<  \"(date1==date2)? \" << (date1==date2) << endl;\n  cout <<  \"(date1!=date2)? \" << (date1!=date2) << endl;\n\n  cout <<  \"(date1<date1)? \" << (date1<date1) << endl;\n  cout <<  \"(date1<=date1)? \" << (date1<=date1) << endl;\n  cout <<  \"(date1<date2)? \" << (date1<date2) << endl;\n  cout <<  \"(date1<=date2)? \" << (date1<=date2) << endl;\n  \n  cout <<  \"(date1>date1)? \" << (date1>date1) << endl;\n  cout <<  \"(date1>=date1)? \" << (date1>=date1) << endl;\n  cout <<  \"(date1>date2)? \" << (date1>date2) << endl;\n  cout <<  \"(date1>=date2)? \" << (date1>=date2) << endl;\n\n}\n/*\nf2() test for:\n  subscript opeartor [] as both lvalue and rvalue\n*/\nvoid f2()\n{\n  Date date1(2011,4,1);\n  cout << \"date1: \" << date1 << endl;\n  cout << date1[\"year\"] << endl;\n  cout << date1[\"month\"] << endl;\n  cout << date1[\"day\"] << endl;  \n  date1[\"year\"] = 2000;\n  date1[\"month\"] = 10;\n  date1[\"day\"] = 10;\n \n  cout << \"date1: \" << date1 << endl;\n}\n\nvoid f3()\n{\n  Date date1(2011,4,1);\n  try\n  {\n    cout << date1[\"abc\"] << endl;\n  }\n  catch(IllegalSubscriptException ex)\n  {\n    cout << \"Illegal Subscript Exception\" << endl;  \n  }\n\n  try\n  {\n      date1[\"abc\"] = 2000;\n  }\n  catch(IllegalSubscriptException ex)\n  {\n    cout << \"Illegal Subscript Exception\" << endl;\n  }\n}  \nint main()\n{\n  f2();\n  f3();\n  //system(\"PAUSE\");\n  return 0;\n}\n\n\n"}, "standard_output": {"standard_output0": "date1: 2011-4-1\n2011\n4\n1\ndate1: 2000-10-10\nIllegal Subscript Exception\nIllegal Subscript Exception\n"}}}