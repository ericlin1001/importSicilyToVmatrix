{"description": "# Description\n<p>Write a function that parses a binary number as a string into a decimal integer. <br />\r\nThe function header is as follows:<br />\r\n<br />\r\nint <strong>parseBinary</strong>(const char * const binaryString)<br />\r\n<br />\r\nYour implementation of parseBinary function should throw a <strong>runtime_error</strong> exception if the binaryString is not a binary string.<br />\r\nThe test function f():<br />\r\nvoid f()<br />\r\n{<br />\r\n&nbsp; try<br />\r\n&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp; cout &lt;&lt; parseBinary(&quot;10001&quot;) &lt;&lt; endl;<br />\r\n&nbsp;&nbsp;&nbsp; cout &lt;&lt; parseBinary(&quot;11111111&quot;) &lt;&lt; endl;<br />\r\n&nbsp;&nbsp;&nbsp; cout &lt;&lt; parseBinary(&quot;21111111&quot;) &lt;&lt; endl;<br />\r\n&nbsp; }<br />\r\n&nbsp; catch (runtime_error ex)<br />\r\n&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp; cout &lt;&lt; ex.what() &lt;&lt; endl;<br />\r\n&nbsp; }<br />\r\n}<br />\r\nshould output:<br />\r\n17<br />\r\n255<br />\r\nBinary number format error<br />\r\n&nbsp;</p>\n# Input\n\n# Output\n\n# Sample_Input\n```\n\n```\n# Sample_Ouput\n```\n\n```\n# Hint\n\n", "files": {"standard_output": {"standard_output0": "17\n255\n10922\nBinary number format error\n4095\n"}, "standard_input": {"standard_input0": ""}, "hidden_support": {}, "support": {"framework.cpp": "#include \"source.h\"\n#include <iostream>\n#include <cstring>\nusing namespace std;\n\nvoid f(const char* const binaryString)\n{\n  try\n  {\n    cout << parseBinary(binaryString) << endl;\n  }\n  catch(runtime_error ex)\n  {\n    cout << ex.what() << endl;\n  }\n}\n\nint main()\n{\n    f(\"10001\");\n    f(\"11111111\");\n    f(\"10101010101010\");\n    f(\"111511\");\n    f(\"111111111111\");\n    return 0;\n}\n\n"}, "submission": {"source.h": "#include<iostream>\n#include<string>\n#include<cmath>\n#include<cstring>\n#include<stdexcept>\nusing namespace std;\n\nint parseBinary(const char * str) {\n\tint n = strlen(str);\n\tint temp = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (str[n - i - 1] >= 48 && str[n - i - 1] <= 49) {\n\t\t\ttemp += (str[n - i - 1] - 48) * pow(2, i);\n\t\t} else {\n\t\t\tthrow runtime_error(\"Binary number format error\");\n\t\t}\n\t}\n\treturn temp;\n}\n\n"}, "random_source": {}}, "config": {"random": {"run_times": 0, "compile_command": "gcc SOURCE -w -std=c++14 -o random"}, "google tests info": {}, "grading": {"random tests": 0, "static check": 20, "memory check": 0, "compile check": 10, "google tests detail": {}, "google tests": 0, "standard tests": 70}, "exec_flag": "--gtest_output=xml:/tmp/Result.xml", "limits": {"time": 1000, "memory": 32}, "standard_language": "c++", "submission": ["source.h"], "standard": {"random_source": [], "support": ["framework.cpp"], "standard_input": ["standard_input0"], "hidden_support": [], "standard_output": ["standard_output0"]}, "compilers": {"c": {"command": "gcc framework.cpp -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}, "clang": {"command": "clang framework.cpp -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}, "c++": {"command": "g++ framework.cpp -g -w -lm -std=c++14 -o OUTPUT_PROGRAM", "version": "default"}, "clang++": {"command": "clang++ framework.cpp -g -w -lm -std=c++11 -o OUTPUT_PROGRAM", "version": "default"}}, "output_program": "main.exe", "language": ["c++"], "entry_point": "standard_main.exe", "standard_score": 100}, "title": "From Sicily::2340 - Exception::1001::Binary to decimal", "ptype_id": 0}