{"config": {"limits": {"time": 1000, "memory": 32}, "submission": ["source.h"], "standard_language": "c++", "output_program": "main.exe", "standard": {"hidden_support": [], "random_source": [], "support": ["framework.cpp"], "standard_input": ["standard_input0"], "standard_output": ["standard_output0"]}, "entry_point": "standard_main.exe", "random": {"compile_command": "gcc SOURCE -w -std=c++14 -o random", "run_times": 0}, "google tests info": {}, "standard_score": 100, "exec_flag": "--gtest_output=xml:/tmp/Result.xml", "grading": {"google tests": 0, "random tests": 0, "static check": 20, "memory check": 0, "compile check": 10, "google tests detail": {}, "standard tests": 70}, "compilers": {"c++": {"command": "g++ framework.cpp -g -w -lm -std=c++14 -o OUTPUT_PROGRAM", "version": "default"}, "clang++": {"command": "clang++ framework.cpp -g -w -lm -std=c++11 -o OUTPUT_PROGRAM", "version": "default"}, "clang": {"command": "clang framework.cpp -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}, "c": {"command": "gcc framework.cpp -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}}, "language": ["c++"]}, "files": {"hidden_support": {}, "support": {"framework.cpp": "#include \"source.h\"\n#include <iostream>\n#include <cstring>\nusing namespace std;\n\nvoid f(const char* const hexString)\n{\n  try\n  {\n    cout << parseHex(hexString) << endl;\n  }\n  catch(runtime_error ex)\n  {\n    cout << ex.what() << endl;\n  }\n}\n\nint main()\n{\n  f(\"10\");\n  f(\"ABC\");\n  f(\"A5\");\n  f(\"FAA\");\n  f(\"10A\");\n  f(\"9G3\");\n  f(\"*H\");\n  f(\"99A\");\n  return 0;\n}\n"}, "standard_input": {"standard_input0": ""}, "standard_output": {"standard_output0": "16\n2748\n165\n4010\n266\nHex number format error\nHex number format error\n2458\n"}, "submission": {"source.h": "#include <iostream>\n#include <cstring>\n#include <iomanip>\n#include <stdexcept>\nusing namespace std;\nint parseHex(const char * const hexString) {\n\tint size = strlen(hexString);\n\tint temp;\n\tint ans = 0;\n\tfor(int i = 0; i < size; i++) {\n\t\tif((hexString[i] >= 'A' && hexString[i] <= 'F') || (hexString[i] >= '0' && hexString[i] <= '9') || (hexString[i] >= 'a' && hexString[i] <= 'f')) {\n\t\t\tif(hexString[i] >= 'A' && hexString[i] <= 'Z') {\n\t\t\t\ttemp = hexString[i] - 'A' + 10;\n\t\t\t} else if(hexString[i] >= '0' && hexString[i] <= '9') {\n\t\t\t\ttemp = hexString[i] - '0';\n\t\t\t} else {\n\t\t\t\ttemp = hexString[i] - 'a' + 10;\n\t\t\t}\n\t\t\tans = ans * 16 + temp;\n\t\t} else {\n\t\t\tthrow runtime_error(\"Hex number format error\");\n\t\t}\n\n\t}\n\treturn ans;\n}\n\n"}, "random_source": {}}, "description": "# Description\n<p>Write a function that parses a hex number as a string into a decimal integer. <br />\r\nThe function header is as follows:<br />\r\n<br />\r\nint <strong>parseHex</strong>(const char * const hexString)<br />\r\n<br />\r\nFor example, hexString &quot;A5&quot; is 165 (10*16+5=165). So, parseHex(&quot;A5&quot;) returns 165.<br />\r\nYour implementation of parseHex function should throw a <strong>runtime_error</strong> exception if the binaryString is not a hex string.<br />\r\nThe test function f():<br />\r\nvoid f()<br />\r\n{<br />\r\n&nbsp; try<br />\r\n&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp; cout &lt;&lt; parseHex(&quot;10&quot;) &lt;&lt; endl;<br />\r\n&nbsp;&nbsp;&nbsp; cout &lt;&lt; parseHex(&quot;ABC&quot;) &lt;&lt; endl;<br />\r\n&nbsp;&nbsp;&nbsp; cout &lt;&lt; parseHex(&quot;9G3&quot;) &lt;&lt; endl;<br />\r\n&nbsp; }<br />\r\n&nbsp; catch (runtime_error ex)<br />\r\n&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp; cout &lt;&lt; ex.what() &lt;&lt; endl;<br />\r\n&nbsp; }<br />\r\n}<br />\r\nshould output:<br />\r\n16<br />\r\n2748<br />\r\nHex number format error<br />\r\n&nbsp;</p>\n# Input\n\n# Output\n\n# Sample_Input\n```\n\n```\n# Sample_Ouput\n```\n\n```\n# Hint\n\n", "title": "From Sicily::2340 - Exception::1000::Hex to decimal", "ptype_id": 0}