{"config": {"limits": {"time": 1000, "memory": 32}, "google tests info": {}, "standard": {"standard_input": ["standard_input0"], "support": ["framework.cpp"], "standard_output": ["standard_output0"], "hidden_support": [], "random_source": []}, "output_program": "main.exe", "compilers": {"c": {"version": "default", "command": "gcc framework.cpp -g -w -lm -o OUTPUT_PROGRAM"}, "clang": {"version": "default", "command": "clang framework.cpp -g -w -lm -o OUTPUT_PROGRAM"}, "c++": {"version": "default", "command": "g++ framework.cpp -g -w -lm -std=c++14 -o OUTPUT_PROGRAM"}, "clang++": {"version": "default", "command": "clang++ framework.cpp -g -w -lm -std=c++11 -o OUTPUT_PROGRAM"}}, "grading": {"memory check": 0, "google tests": 0, "google tests detail": {}, "static check": 20, "random tests": 0, "standard tests": 70, "compile check": 10}, "standard_score": 100, "entry_point": "standard_main.exe", "language": ["c++"], "random": {"compile_command": "gcc SOURCE -w -std=c++14 -o random", "run_times": 0}, "standard_language": "c++", "exec_flag": "--gtest_output=xml:/tmp/Result.xml", "submission": ["source.h"]}, "title": "From Sicily::2340 - Exception::1003::Modify StackOfIntegers class", "description": "# Description\n<p><br />\r\nclass StackOfIntegers<br />\r\n{<br />\r\npublic:<br />\r\n&nbsp; StackOfIntegers();<br />\r\n&nbsp; bool empty();<br />\r\n&nbsp; int peek();<br />\r\n&nbsp; void push(int value);<br />\r\n&nbsp; int pop();<br />\r\n&nbsp; int getSize();<br />\r\n};<br />\r\nDefine a custom exception class named EmptyStackException and let the peek and pop function throw an ExmptyStackException if the stack is empty.<br />\r\nThe test function f():<br />\r\nvoid f()<br />\r\n{<br />\r\n&nbsp; StackOfIntegers s;<br />\r\n<br />\r\n&nbsp; try<br />\r\n&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp; s.peek();<br />\r\n&nbsp; }<br />\r\n&nbsp; catch(EmptyStackException ex)<br />\r\n&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp; cout &lt;&lt; ex.what() &lt;&lt; endl;<br />\r\n&nbsp; }<br />\r\n&nbsp; <br />\r\n&nbsp; try<br />\r\n&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp; s.pop();<br />\r\n&nbsp; }<br />\r\n&nbsp; catch(EmptyStackException ex)<br />\r\n&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp; cout &lt;&lt; ex.what() &lt;&lt; endl;<br />\r\n&nbsp; }<br />\r\n}<br />\r\nshould output:<br />\r\nEmpty Stack Exception<br />\r\nEmpty Stack Exception</p>\n# Input\n\n# Output\n\n# Sample_Input\n```\n\n```\n# Sample_Ouput\n```\n\n```\n# Hint\n\n", "ptype_id": 0, "files": {"support": {"framework.cpp": "#include <iostream>\n#include \"source.h\"\nusing namespace std;\n\nvoid f1()\n{\n  StackOfIntegers s;\n\n  cout << s.getSize() << endl;\n  for (int i = 0; i < 10; i++)\n  {  \n    s.push(i);\n    cout << s.getSize() << \" \" << s.peek() << endl;\n  }\n  while (!s.empty())\n    cout << s.pop() << \" \";\n  cout << endl;\n}\n\nvoid f2()\n{\n  StackOfIntegers s;\n\n  try\n  {\n    s.peek();\n  }\n  catch(EmptyStackException ex)\n  {\n    cout << \"Empty Stack Exception\" << endl;\n  }\n  \n  try\n  {\n    s.pop();\n  }\n  catch(EmptyStackException ex)\n  {\n    cout << \"Empty Stack Exception\" << endl;\n  }\n}\n\nint main()\n{\n  f2();\n  f1();\n  return 0;\n}\n"}, "standard_input": {"standard_input0": ""}, "standard_output": {"standard_output0": "Empty Stack Exception\nEmpty Stack Exception\n0\n1 0\n2 1\n3 2\n4 3\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n9 8 7 6 5 4 3 2 1 0 \n"}, "hidden_support": {}, "random_source": {}, "submission": {"source.h": "#include<iostream>\n#include<cmath>\n#include<exception>\n#include<stdexcept>\n#include<cstring>\nusing namespace std;\n\nclass EmptyStackException : public range_error {\n\tpublic:\n\t\tEmptyStackException(string s) : range_error(s) {\n\t\t}\n};\n\nclass StackOfIntegers {\n\tpublic:\n\t\tStackOfIntegers() {\n\t\t\tnum = 0;\n\t\t}\n\t\tbool empty() {\n\t\t\treturn (!num);\n\t\t}\n\t\tint peek() {\n\t\t\tif (empty()) throw EmptyStackException(\"Empty Stack Exception\");\n\t\t\telse return data[num - 1];\n\t\t}\n\t\tvoid push(int value) {\n\t\t\tdata[num] = value;\n\t\t\t++num;\n\t\t}\n\t\tint pop() {\n\t\t\tif (empty()) throw EmptyStackException(\"Empty Stack Exception\");\n\t\t\telse {\n\t\t\t\tint k = data[num - 1];\n\t\t\t\t--num;\n\t\t\t\treturn k;\n\t\t\t}\n\t\t}\n\t\tint getSize() {\n\t\t\treturn num;\n\t\t}\n\tprivate:\n\t\tint data[100];\n\t\tint num;\n};\n\n"}}}