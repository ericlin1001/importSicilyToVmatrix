{"ptype_id": 0, "description": "# Description\n<p>Given a valid identifier in C++ programs, please write a program to reverse it by respectively reversing each part separated by &lsquo;_&rsquo;.</p>\n# Input\n<p>The first line is an integer t, indicating the number of test cases.<br />\r\nThen there are t lines and each line contains a string. A string will contain no more than 100 characters and there is one or more &lsquo;_&rsquo;.</p>\n# Output\n<p>For each test case, print out the string with each part reversed.</p>\n# Sample_Input\n```\n3\r\nnt_45\r\n_me_\r\nabc_123_456\n```\n# Sample_Ouput\n```\ntn_54\r\n_em_\r\ncba_321_654\r\n\r\n\n```\n# Hint\n\n", "files": {"standard_input": {"standard_input0": "5\nJohn_Smith\nint_45\n_me\nabc_123_456_\n_abc_123_456_"}, "standard_output": {"standard_output0": "nhoJ_htimS\ntni_54\n_em\ncba_321_654_\n_cba_321_654_\n"}, "submission": {"source.cpp": "#include <iostream>\n#include <string>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    int T;\n    cin >> T;\n    while (T--) {\n        string s;\n        cin >> s;\n        s = \"_\" + s + \"_\";\n        int bPos = s.find(\"_\");\n        int ePos = s.length();\n        while (1) {\n            if (bPos != string::npos) {\n                int pos = s.find(\"_\", bPos+1);\n                if (pos != string::npos) {\n                    ePos = pos;\n                } else {\n                    ePos = s.length();\n                }\n            }\n            reverse(s.begin()+bPos+1, s.begin()+ePos);\n            bPos = ePos;\n            if (bPos == s.length()) break;\n        }\n        cout << s.substr(1, s.length()-2) << endl;\n    }\n    return 0;\n}                                 \n\n"}, "random_source": {}, "support": {}, "hidden_support": {}}, "title": "From Sicily::2251 - String class::1002::String Reversion", "config": {"grading": {"static check": 20, "compile check": 10, "google tests": 0, "standard tests": 70, "google tests detail": {}, "memory check": 0, "random tests": 0}, "submission": ["source.cpp"], "output_program": "main.exe", "standard": {"standard_input": ["standard_input0"], "standard_output": ["standard_output0"], "random_source": [], "support": [], "hidden_support": []}, "language": ["c++"], "entry_point": "standard_main.exe", "compilers": {"clang": {"version": "default", "command": "clang CODE_FILES -g -w -lm -o OUTPUT_PROGRAM"}, "clang++": {"version": "default", "command": "clang++ CODE_FILES -g -w -lm -std=c++11 -o OUTPUT_PROGRAM"}, "c": {"version": "default", "command": "gcc CODE_FILES -g -w -lm -o OUTPUT_PROGRAM"}, "c++": {"version": "default", "command": "g++ CODE_FILES -g -w -lm -std=c++14 -o OUTPUT_PROGRAM"}}, "google tests info": {}, "random": {"compile_command": "gcc SOURCE -w -std=c++14 -o random", "run_times": 0}, "exec_flag": "--gtest_output=xml:/tmp/Result.xml", "standard_score": 100, "limits": {"time": 1000, "memory": 32}, "standard_language": "c++"}}