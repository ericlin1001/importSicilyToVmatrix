{"files": {"support": {"framework.cpp": "#include<iostream>\n#include<string>\n#include\"source.h\"\nusing namespace std;\nvoid f()\n{\n  Complex a;  \n  cout << a << endl;  \n  Complex b = Complex(1,1.5); \n  cout << b << endl;   \n  Complex c(3.5); \n  cout << c << endl;   \n  c += a; \n  cout << c << endl; \n  \n  c = c + a; \n  cout << c << endl; \n  \n  c = c + 2.5; \n  cout << c << endl; \n  \n  c = 2.5 + c; \n  cout << c << endl; \n\n  c -= a;\n  cout << c << endl; \n  \n  c = c - a;\n  cout << c << endl; \n\n  c = c - 2.5;\n  cout <<  c << endl; \n  \n  c = 2.5 - b;\n  cout << c << endl; \n  \n  c *= b;\n  cout << c << endl; \n  \n  c = c * b;\n  //cout << c << endl; \n\n  c = c * 2.5;\n  //cout << c << endl; \n  \n  c = 2.5 * c;\n  //cout << c << endl; \n  \n  c /= b;\n  //cout << c << endl; \n  \n  c = c / b;\n  //cout << c << endl; \n\n  c = c / 2.5;\n  //cout << c << endl; \n  \n  c = 2.5 / c;\n  //cout << c << endl; \n  \n  c = -b;\n  cout << c << endl;\n   \n  cout << (a==a) << endl; //output 1\n  cout << (a==0.0) << endl; //output 1\n  cout << (0.0==a) << endl; //output 1\n  cout << (a!=a) << endl; //output 0 \n  cout << (a!=0.0) << endl; //output 0\n  cout << (0.0!=a) << endl; //output 0  \n  \n  //cout << a+2.5 << endl;\n  //cout << 2.5+a << endl;\n  //cout << a+b << endl;\n  //c = a+2.5+a + b*2.5*b;\n  while (cin >> c)\n  {\n    cout << c << endl;\n    //cout << \"(\" << c.real() << \",\" << c.imag() << \")\" << endl;\n  }\n}\n\nint main()\n{\n  f();\n\n  return 0;\n}\n"}, "submission": {"source.h": "#include <iostream>\n#include <stdio.h>\nusing namespace std;\n\nclass Complex {\n\t\tdouble re; //real part of a complex number\n\t\tdouble im; //imaginary part of a complex number\n\tpublic:\n\t\tComplex() {\n\t\t\tre = 0;\n\t\t\tim = 0;\n\t\t}\n\t\tComplex(double a,double b = 0) {\n\t\t\tre = a;\n\t\t\tim = b;\n\t\t}\n\t\tComplex(const Complex& B) {\n\t\t\tre = B.re;\n\t\t\tim = B.im;\n\t\t}\n\t\tdouble real() const {\n\t\t\treturn re;\n\t\t}\n\t\tdouble imag() const {\n\t\t\treturn im;\n\t\t}\n\t\tfriend ostream &operator<<(ostream &os,const Complex &c) {\n\t\t\tos << \"(\" << c.re << \",\" << c.im << \")\";\n\t\t\treturn os;\n\t\t}\n\t\tfriend istream &operator>>(istream &is,Complex &c) {\n\t\t\tchar i;\n\t\t\tis >> i >> c.re >> i >> c.im >> i;\n\t\t\treturn is;\n\t\t}\n\t\tComplex operator+(const Complex& B) {\n\t\t\tComplex temp;\n\t\t\ttemp.re = re + B.re;\n\t\t\ttemp.im = im + B.im;\n\t\t\treturn temp;\n\t\t}\n\t\tComplex& operator+=(const Complex& B) {\n\t\t\tre += B.re;\n\t\t\tim += B.im;\n\t\t\treturn *this;\n\t\t}\n\t\tComplex operator+(double num) {\n\t\t\tComplex temp;\n\t\t\ttemp.re = re + num;\n\t\t\ttemp.im = im;\n\t\t\treturn temp;\n\t\t}\n\t\tfriend Complex operator+(double num,const Complex & B) {\n\t\t\tComplex temp;\n\t\t\ttemp.re = B.re + num;\n\t\t\ttemp.im = B.im;\n\t\t\treturn temp;\n\t\t}\n\t\tComplex operator-(const Complex& B) {\n\t\t\tComplex temp;\n\t\t\ttemp.re = re - B.re;\n\t\t\ttemp.im = im - B.im;\n\t\t\treturn temp;\n\t\t}\n\t\tComplex operator-(double num) {\n\t\t\tComplex temp;\n\t\t\ttemp.re = re - num;\n\t\t\ttemp.im = im;\n\t\t\treturn temp;\n\t\t}\n\t\tfriend Complex operator-(double num,const Complex & B) {\n\t\t\tComplex temp;\n\t\t\ttemp.re = num - B.re;\n\t\t\ttemp.im = -B.im;\n\t\t\treturn temp;\n\t\t}\n\t\tComplex& operator-=(const Complex& B) {\n\t\t\tre -= B.re;\n\t\t\tim -= B.im;\n\t\t\treturn *this;\n\t\t}\n\t\tComplex operator*(const Complex& B) {\n\t\t\tComplex temp;\n\t\t\ttemp.re = re * B.re - im * B.im;\n\t\t\ttemp.im = im * B.re + re * B.im;\n\t\t\treturn temp;\n\t\t}\n\t\tComplex operator*(double num) {\n\t\t\tComplex temp;\n\t\t\ttemp.re = re * num;\n\t\t\ttemp.im = im * num;\n\t\t\treturn temp;\n\t\t}\n\t\tfriend Complex operator*(double num,const Complex & B) {\n\t\t\tComplex temp;\n\t\t\ttemp.re = num * B.re;\n\t\t\ttemp.im = B.im * num;\n\t\t\treturn temp;\n\t\t}\n\t\tComplex& operator*=(const Complex& B) {\n\t\t\tdouble temp1 = re, temp2 = im;\n\t\t\tre = temp1 * B.real() - temp2 * B.imag();\n\t\t\tim = temp1 * B.imag() + temp2 * B.real();\n\t\t\treturn *this;\n\t\t}\n\t\tComplex operator/(const Complex& B) {\n\t\t\tComplex temp;\n\t\t\ttemp.re = (re * B.re + im * B.im) / (B.re * B.re + B.im * B.im);\n\t\t\ttemp.im = (im * B.re - re * B.im) / (B.re * B.re + B.im * B.im);\n\t\t\treturn temp;\n\t\t}\n\t\tComplex& operator/=(const Complex& B) {\n\t\t\tComplex temp;\n\t\t\ttemp.re = (re * B.re + im * B.im) / (B.re * B.re + B.im * B.im);\n\t\t\ttemp.im = (im * B.re - re * B.im) / (B.re * B.re + B.im * B.im);\n\t\t\tre = temp.re;\n\t\t\tim = temp.im;\n\t\t\treturn *this;\n\t\t}\n\t\tComplex operator/(double num) {\n\t\t\tComplex temp;\n\t\t\ttemp.re = re / num;\n\t\t\ttemp.im = im / num;\n\t\t\treturn temp;\n\t\t}\n\t\tfriend Complex operator/(double num,const Complex & B) {\n\t\t\tComplex temp;\n\t\t\ttemp.re = (num * B.re) / (B.re * B.re + B.im * B.im);\n\t\t\ttemp.im = ((-num) * B.im) / (B.re * B.re + B.im * B.im);\n\t\t\treturn temp;\n\t\t}\n\t\tbool operator == (const Complex& B) {\n\t\t\tif (re - B.re < 1e-10 && im - B.im < 1e-10) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tbool operator != (const Complex& B) {\n\t\t\tif (re - B.re < 1e-10 && im - B.im < 1e-10) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tbool operator == (double num) {\n\t\t\tif (re - num < 1e-10 && im - 0.0 < 1e-10) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tbool operator != (double num) {\n\t\t\tif (re - num < 1e-10 && im - 0.0 < 1e-10) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tfriend bool operator == (double num, const Complex& B) {\n\t\t\tif (B.re - num < 1e-10 && B.im - 0.0 < 1e-10) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tfriend bool operator != (double num, const Complex& B) {\n\t\t\tif (B.re == num && B.im == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tComplex operator-() {\n\t\t\tComplex temp;\n\t\t\ttemp.re = -re;\n\t\t\ttemp.im = -im;\n\t\t\treturn temp;\n\t\t}\n};\n\n"}, "standard_output": {"standard_output0": "(0,0)\n(1,1.5)\n(3.5,0)\n(3.5,0)\n(3.5,0)\n(6,0)\n(8.5,0)\n(8.5,0)\n(8.5,0)\n(6,0)\n(1.5,-1.5)\n(3.75,0.75)\n(-1,-1.5)\n1\n1\n1\n0\n0\n0\n(1.5,2)\n(1,2.5)\n(1.5,2.5)\n(0,0)\n(1,2)\n"}, "random_source": {}, "hidden_support": {}, "standard_input": {"standard_input0": "(1.5,2)(1,2.5)(1.5,2.5)(0,0)(1,2)\n"}}, "config": {"google tests info": {}, "output_program": "main.exe", "grading": {"google tests detail": {}, "random tests": 0, "standard tests": 70, "static check": 20, "compile check": 10, "google tests": 0, "memory check": 0}, "language": ["c++"], "compilers": {"c": {"command": "gcc framework.cpp -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}, "c++": {"command": "g++ framework.cpp -g -w -lm -std=c++14 -o OUTPUT_PROGRAM", "version": "default"}, "clang++": {"command": "clang++ framework.cpp -g -w -lm -std=c++11 -o OUTPUT_PROGRAM", "version": "default"}, "clang": {"command": "clang framework.cpp -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}}, "submission": ["source.h"], "random": {"run_times": 0, "compile_command": "gcc SOURCE -w -std=c++14 -o random"}, "standard": {"support": ["framework.cpp"], "random_source": [], "standard_output": ["standard_output0"], "hidden_support": [], "standard_input": ["standard_input0"]}, "entry_point": "standard_main.exe", "standard_score": 100, "exec_flag": "--gtest_output=xml:/tmp/Result.xml", "standard_language": "c++", "limits": {"time": 1000, "memory": 32}}, "title": "From Sicily::2275 - operator overloading(cont2)::1002::The Complex class", "ptype_id": 0, "description": "# The Complex class\n\n# Description\n<p><span style=\"font-size: larger\">Implement the Complex class:<br />\r\nclass Complex<br />\r\n{<br />\r\n&nbsp; double re; //real part of a complex number<br />\r\n&nbsp; double im; //imaginary part of a complex number<br />\r\npublic:<br />\r\n&nbsp; double real() const { return re; }<br />\r\n&nbsp; double imag() const { return im; }<br />\r\n&nbsp; <br />\r\n&nbsp; // add any other function needed here<br />\r\n};<br />\r\nThe Complex class implemented may be used like this:<br />\r\nvoid f()<br />\r\n{<br />\r\n&nbsp; Complex a;&nbsp; <br />\r\n&nbsp; cout &lt;&lt; a &lt;&lt; endl; //output (0,0) <br />\r\n&nbsp; <br />\r\n&nbsp; Complex b = Complex(1,2.5); <br />\r\n&nbsp; cout &lt;&lt; b &lt;&lt; endl; //<span class=\"Apple-style-span\" style=\"line-height: 20px; border-collapse: collapse; font-family: Arial; color: rgb(51,51,51)\">output(1,2.5)</span><br />\r\n&nbsp; <br />\r\n&nbsp; Complex c(3.0); <br />\r\n&nbsp; cout &lt;&lt; c &lt;&lt; endl; //output (3,0)<br />\r\n&nbsp; <br />\r\n&nbsp; c += a; <br />\r\n&nbsp; cout &lt;&lt; c &lt;&lt; endl; <br />\r\n&nbsp; <br />\r\n&nbsp; c = c + a; <br />\r\n&nbsp; cout &lt;&lt; c &lt;&lt; endl; <br />\r\n&nbsp; <br />\r\n&nbsp; c = c + 2.5; <br />\r\n&nbsp; cout &lt;&lt; c &lt;&lt; endl; <br />\r\n&nbsp; <br />\r\n&nbsp; c = 2.5 + c; <br />\r\n&nbsp; cout &lt;&lt; c &lt;&lt; endl; <br />\r\n<br />\r\n&nbsp; c -= a;<br />\r\n&nbsp; cout &lt;&lt; c &lt;&lt; endl; <br />\r\n&nbsp; <br />\r\n&nbsp; c = c - a;<br />\r\n&nbsp; cout &lt;&lt; c &lt;&lt; endl; <br />\r\n<br />\r\n&nbsp; c = c - 2.5;<br />\r\n&nbsp; cout &lt;&lt; c &lt;&lt; endl; <br />\r\n&nbsp; <br />\r\n&nbsp; c = 2.5 - c;<br />\r\n&nbsp; cout &lt;&lt; c &lt;&lt; endl; <br />\r\n&nbsp; <br />\r\n&nbsp; c *= b;<br />\r\n&nbsp; cout &lt;&lt; c &lt;&lt; endl; <br />\r\n&nbsp; <br />\r\n&nbsp; c = c * b;<br />\r\n&nbsp; cout &lt;&lt; c &lt;&lt; endl; <br />\r\n<br />\r\n&nbsp; c = c * 2.5;<br />\r\n&nbsp; cout &lt;&lt; c &lt;&lt; endl; <br />\r\n&nbsp; <br />\r\n&nbsp; c = 2.5 * c;<br />\r\n&nbsp; cout &lt;&lt; c &lt;&lt; endl; <br />\r\n&nbsp; <br />\r\n&nbsp; c /= b;<br />\r\n&nbsp; cout &lt;&lt; c &lt;&lt; endl; <br />\r\n&nbsp; <br />\r\n&nbsp; c = c / b;<br />\r\n&nbsp; cout &lt;&lt; c &lt;&lt; endl; <br />\r\n<br />\r\n&nbsp; c = c / 2.5;<br />\r\n&nbsp; cout &lt;&lt; c &lt;&lt; endl; <br />\r\n&nbsp; <br />\r\n&nbsp; c = 2.5 / c;<br />\r\n&nbsp; cout &lt;&lt; c &lt;&lt; endl; <br />\r\n&nbsp; <br />\r\n&nbsp; c = a+2.5+a + b*2.5*b;<br />\r\n&nbsp; cout &lt;&lt; c &lt;&lt; endl;<br />\r\n<br />\r\n&nbsp; c = -b;<br />\r\n&nbsp; cout &lt;&lt; c &lt;&lt; endl;<br />\r\n&nbsp;&nbsp; <br />\r\n&nbsp; cout &lt;&lt; (a==a) &lt;&lt; endl; //output 1<br />\r\n&nbsp; cout &lt;&lt; (a==0.0) &lt;&lt; endl; //output 1<br />\r\n&nbsp; cout &lt;&lt; (0.0==a) &lt;&lt; endl; //output 1<br />\r\n&nbsp; cout &lt;&lt; (a!=a) &lt;&lt; endl; //output 0 <br />\r\n&nbsp; cout &lt;&lt; (a!=0.0) &lt;&lt; endl; //output 0<br />\r\n&nbsp; cout &lt;&lt; (0.0!=a) &lt;&lt; endl; //output 0&nbsp; <br />\r\n<br />\r\n&nbsp; cin &gt;&gt; c; //\u8f93\u5165\u683c\u5f0f(a,b)\u8868\u793a\u590d\u6570a + b i<br />\r\n&nbsp; cout &lt;&lt; c &lt;&lt; endl;<br />\r\n}<br />\r\n</span></p>\n\n# Input\n\n\n# Output\n\n\n# Sample_Input\n```\n\n```\n\n# Sample_Ouput\n```\n\n```\n\n# Hint\n\n\n"}