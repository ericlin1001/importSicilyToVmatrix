{"ptype_id": 0, "title": "From Sicily::2256 - operator overloading::1000::The Date class (version 1)", "description": "# Description\n<pre>\r\nImplement the operator &lt;, &lt;=, ==, !=, &gt;, &gt;= with the class Date\r\nclass Date\r\n{\r\npublic:\r\n  Date(int y=0, int m=1, int d=1);  \r\n  static bool leapyear(int year);\r\n  int getYear() const;\r\n  int getMonth() const;\r\n  int getDay() const;\r\n\r\n  // add any member you need here  \r\n};\r\n\r\nYou implementation should enable the usage like this:\r\nvoid f()\r\n{\r\n  Date date1, date2(2003,1,1);\r\n  Date date3 = Date(2007,2,28);\r\n  date3 = date1;\r\n\r\n  cout &lt;&lt; &quot;year 1996 is leap year? &quot; &lt;&lt; Date::leapyear(1996) &lt;&lt; endl;\r\n  cout &lt;&lt; &quot;year 1200 is leap year? &quot; &lt;&lt; Date::leapyear(1200) &lt;&lt; endl;\r\n  cout &lt;&lt; &quot;year 1300 is leap year? &quot; &lt;&lt; Date::leapyear(1300) &lt;&lt; endl;\r\n  cout &lt;&lt; &quot;year 1999 is leap year? &quot; &lt;&lt; Date::leapyear(1999) &lt;&lt; endl;\r\n\r\n  cout &lt;&lt;  &quot;(date1==date3)? &quot; &lt;&lt; (date1==date3) &lt;&lt; endl;\r\n  cout &lt;&lt;  &quot;(date1!=date3)? &quot; &lt;&lt; (date1!=date3) &lt;&lt; endl;\r\n  cout &lt;&lt;  &quot;(date1==date2)? &quot; &lt;&lt; (date1==date2) &lt;&lt; endl;\r\n  cout &lt;&lt;  &quot;(date1!=date2)? &quot; &lt;&lt; (date1!=date2) &lt;&lt; endl;\r\n\r\n  cout &lt;&lt;  &quot;(date1&lt;date1)? &quot; &lt;&lt; (date1&lt;date1) &lt;&lt; endl;\r\n  cout &lt;&lt;  &quot;(date1&lt;=date1)? &quot; &lt;&lt; (date1&lt;=date1) &lt;&lt; endl;\r\n  cout &lt;&lt;  &quot;(date1&lt;date2)? &quot; &lt;&lt; (date1&lt;date2) &lt;&lt; endl;\r\n  cout &lt;&lt;  &quot;(date1&lt;=date2)? &quot; &lt;&lt; (date1&lt;=date2) &lt;&lt; endl;\r\n \r\n  cout &lt;&lt;  &quot;(date1&gt;date1)? &quot; &lt;&lt; (date1&gt;date1) &lt;&lt; endl;\r\n  cout &lt;&lt;  &quot;(date1&gt;=date1)? &quot; &lt;&lt; (date1&gt;=date1) &lt;&lt; endl;\r\n  cout &lt;&lt;  &quot;(date1&gt;date2)? &quot; &lt;&lt; (date1&gt;date2) &lt;&lt; endl;\r\n  cout &lt;&lt;  &quot;(date1&gt;=date2)? &quot; &lt;&lt; (date1&gt;=date2) &lt;&lt; endl;\r\n}\r\nThe output of f() should be:\r\nyear 1996 is leap year? 1\r\nyear 1200 is leap year? 1\r\nyear 1300 is leap year? 0\r\nyear 1999 is leap year? 0\r\n(date1==date3)? 1\r\n(date1!=date3)? 0\r\n(date1==date2)? 0\r\n(date1!=date2)? 1\r\n(date1&lt;date1)? 0\r\n(date1&lt;=date1)? 1\r\n(date1&lt;date2)? 1\r\n(date1&lt;=date2)? 1\r\n(date1&gt;date1)? 0\r\n(date1&gt;=date1)? 1\r\n(date1&gt;date2)? 0\r\n(date1&gt;=date2)? 0</pre>\n# Input\n\n# Output\n\n# Sample_Input\n```\n\n```\n# Sample_Ouput\n```\n\n```\n# Hint\n\n", "config": {"standard": {"standard_input": ["standard_input0"], "support": ["framework.cpp"], "standard_output": ["standard_output0"], "random_source": [], "hidden_support": []}, "submission": ["source.h"], "limits": {"time": 1000, "memory": 32}, "google tests info": {}, "random": {"run_times": 0, "compile_command": "gcc SOURCE -w -std=c++14 -o random"}, "entry_point": "standard_main.exe", "standard_language": "c++", "exec_flag": "--gtest_output=xml:/tmp/Result.xml", "output_program": "main.exe", "standard_score": 100, "language": ["c++"], "compilers": {"clang++": {"command": "clang++ framework.cpp -g -w -lm -std=c++11 -o OUTPUT_PROGRAM", "version": "default"}, "c": {"command": "gcc framework.cpp -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}, "clang": {"command": "clang framework.cpp -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}, "c++": {"command": "g++ framework.cpp -g -w -lm -std=c++14 -o OUTPUT_PROGRAM", "version": "default"}}, "grading": {"standard tests": 70, "google tests": 0, "google tests detail": {}, "compile check": 10, "static check": 20, "random tests": 0, "memory check": 0}}, "files": {"standard_input": {"standard_input0": ""}, "support": {"framework.cpp": "#include<iostream>\n#include<string>\n#include\"source.h\"\nusing namespace std;\n\nostream& operator<<(ostream& os, const Date& date)\n{\n  os << date.getYear() << \"-\" << date.getMonth() << \"-\" << date.getDay();\n  return os;\n}\n\n/* \nf1() test for:\n  constructor, copy constructor, assign assignment\n  static member function leapyear()\n  operator ==, !=, <, <=, >, >=\n*/\nvoid f1()\n{\n  Date date1, date2(2003,1,1);\n  Date date3 = Date(2007,2,28);\n  cout << \"date1: \" << date1 << endl;\n  cout << \"date2: \" << date2 << endl;\n  \n  cout << \"date3 after copy constructor: \" << date3 << endl;\n  date3 = date1;\n  cout << \"date3 after copy asignment: \" << date3 << endl;  \n\n  cout << \"year 1996 is leap year? \" << Date::leapyear(1996) << endl;\n  cout << \"year 1200 is leap year? \" << Date::leapyear(1200) << endl;\n  cout << \"year 1300 is leap year? \" << Date::leapyear(1300) << endl;\n  cout << \"year 1999 is leap year? \" << Date::leapyear(1999) << endl;\n\n  cout <<  \"(date1==date3)? \" << (date1==date3) << endl;\n  cout <<  \"(date1!=date3)? \" << (date1!=date3) << endl;\n  cout <<  \"(date1==date2)? \" << (date1==date2) << endl;\n  cout <<  \"(date1!=date2)? \" << (date1!=date2) << endl;\n\n  cout <<  \"(date1<date1)? \" << (date1<date1) << endl;\n  cout <<  \"(date1<=date1)? \" << (date1<=date1) << endl;\n  cout <<  \"(date1<date2)? \" << (date1<date2) << endl;\n  cout <<  \"(date1<=date2)? \" << (date1<=date2) << endl;\n  \n  cout <<  \"(date1>date1)? \" << (date1>date1) << endl;\n  cout <<  \"(date1>=date1)? \" << (date1>=date1) << endl;\n  cout <<  \"(date1>date2)? \" << (date1>date2) << endl;\n  cout <<  \"(date1>=date2)? \" << (date1>=date2) << endl;\n\n}\n\nint main()\n{\n  f1();\n  //system(\"PAUSE\");\n  return 0;\n}\n\nvoid f2()\n{\n  Date date1, date2(2003,1,1);\n  Date date3 = Date(2007,2,28);\n  cout << \"date1: \" << date1 << endl;\n\n  cout << \"date3 after copy constructor: \" << date3 << endl;\n  date3 = Date(2010, 2, 29);\n  cout << \"date3 after copy asignment: \" << date3 << endl;  \n  \n  /*\n  int i1, i2;\n  date2 -= 60;\n  cout << \"date2: \" << date2 << endl;\n  cout << \"date2.operator-=(int): \" << date3 << endl;  \n\n  i1 = date3 - date2;\n  cout << \"date3-date2 = \" << i1 << endl;   \n  */\n}\n\n"}, "standard_output": {"standard_output0": "date1: 0-1-1\ndate2: 2003-1-1\ndate3 after copy constructor: 2007-2-28\ndate3 after copy asignment: 0-1-1\nyear 1996 is leap year? 1\nyear 1200 is leap year? 1\nyear 1300 is leap year? 0\nyear 1999 is leap year? 0\n(date1==date3)? 1\n(date1!=date3)? 0\n(date1==date2)? 0\n(date1!=date2)? 1\n(date1<date1)? 0\n(date1<=date1)? 1\n(date1<date2)? 1\n(date1<=date2)? 1\n(date1>date1)? 0\n(date1>=date1)? 1\n(date1>date2)? 0\n(date1>=date2)? 0\n"}, "random_source": {}, "submission": {"source.h": "#include <iostream>\n#include <cstring>\n#include <cmath>\n#include <stdio.h>\n\nusing namespace std;\n\nclass Date {\n\tpublic:\n\t\tDate(int a, int b, int c):year(a), month(b), day(c) {\n\t\t}\n\t\tDate():year(0), month(1), day(1) {\n\t\t}\n\t\tstatic bool leapyear(int year) {\n\t\t\tif(year%4 == 0) {\n\t\t\t\tif(year%100 != 0)\n\t\t\t\t\treturn 1;\n\t\t\t\telse {\n\t\t\t\t\tif(year%400 == 0)\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\telse\n\t\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\treturn 0;\n\t\t}\n\t\tint getYear() const {\n\t\t\treturn year;\n\t\t}\n\t\tint getMonth() const {\n\t\t\treturn month;\n\t\t}\n\t\tint getDay() const {\n\t\t\treturn day;\n\t\t}\n\t\tDate & operator=(Date  date2) {\n\t\t\tyear = date2.year;\n\t\t\tmonth = date2.month;\n\t\t\tday = date2.day;\n\t\t\treturn *this;\n\t\t}\n\n\t\tbool operator==(Date & date2) {\n\t\t\tif(year == date2.year && month == date2.month && day == date2.day)\n\t\t\t\treturn 1;\n\t\t\telse\n\t\t\t\treturn 0;\n\t\t}\n\n\t\tbool operator!=(Date & date2) {\n\t\t\tif(!operator==(date2))\n\t\t\t\treturn 1;\n\t\t\telse\n\t\t\t\treturn 0;\n\t\t}\n\n\t\tbool operator<(Date & date2) {\n\t\t\tif(year == date2.year) {\n\t\t\t\tif(month == date2.month) {\n\t\t\t\t\tif(day < date2.day)\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\telse\n\t\t\t\t\t\treturn 0;\n\t\t\t\t} else if(month < date2.month)\n\t\t\t\t\treturn 1;\n\t\t\t\telse\n\t\t\t\t\treturn 0;\n\t\t\t} else if(year < date2.year)\n\t\t\t\treturn 1;\n\t\t\telse\n\t\t\t\treturn 0;\n\t\t}\n\n\t\tbool operator<=(Date & date2) {\n\t\t\tif(*this < date2 || *this == date2)\n\t\t\t\treturn 1;\n\t\t\telse\n\t\t\t\treturn 0;\n\t\t}\n\n\t\tbool operator>(Date & date2) {\n\t\t\tif(year == date2.year) {\n\t\t\t\tif(month == date2.month) {\n\t\t\t\t\tif(day > date2.day)\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\telse\n\t\t\t\t\t\treturn 0;\n\t\t\t\t} else if(month > date2.month)\n\t\t\t\t\treturn 1;\n\t\t\t\telse\n\t\t\t\t\treturn 0;\n\t\t\t} else if(year > date2.year)\n\t\t\t\treturn 1;\n\t\t\telse\n\t\t\t\treturn 0;\n\t\t}\n\n\t\tbool operator>=(Date & date2) {\n\t\t\tif(*this > date2 || *this == date2)\n\t\t\t\treturn 1;\n\t\t\telse\n\t\t\t\treturn 0;\n\t\t}\n\n\tprivate:\n\t\tint year;\n\t\tint month;\n\t\tint day;\n};\n\n"}, "hidden_support": {}}}