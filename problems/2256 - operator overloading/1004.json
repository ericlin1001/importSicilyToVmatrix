{"files": {"support": {"framework.cpp": "#include <iostream>\nusing namespace std;\n\n#include \"source.h\"\n\nint main()\n{\n\t//freopen(\"test01.in\", \"r\", stdin);\n\t//freopen(\"test01.out\", \"w\", stdout);\n\tComplex a(1,2);\n\tComplex b(2, 3);\n\tcout << \"a(\" << a.getReal() << \", \" << a.getImag() << \")\" << endl;\n\tcout << \"b(\" << b.getReal() << \", \" << b.getImag() << \")\" << endl;\n\n\tComplex c, d;\n\tc = a + b;\n\tcout << \"c(\" << c.getReal() << \", \" << c.getImag() << \")\" << endl;\n\td = a - b;\n\tcout << \"d(\" << d.getReal() << \", \" << d.getImag() << \")\" << endl;\n\tc += d;\n\tcout << \"c(\" << c.getReal() << \", \" << c.getImag() << \")\" << endl;\n\tc -= a;\n\tcout << \"c(\" << c.getReal() << \", \" << c.getImag() << \")\" << endl;\n\n\treturn 0;\n}\n"}, "submission": {"source.h": "#include<iostream>\nusing namespace std;\nclass Complex {\n\tpublic:\n\t\tComplex(): real(0), imag(0) {}\n\t\tComplex(int a, int b): real(a), imag(b) {}\n\t\tint getReal() const {\n\t\t\treturn real;\n\t\t}\n\t\tint getImag() const {\n\t\t\treturn imag;\n\t\t}\n\t\tComplex operator+(const Complex &s) {\n\t\t\treturn Complex(real+s.getReal(), imag+s.getImag());\n\t\t}\n\t\tComplex operator=(const Complex &s) {\n\t\t\treal=s.getReal();\n\t\t\timag=s.getImag();\n\t\t}\n\t\tComplex operator-(const Complex &s) {\n\t\t\treturn Complex(real-s.getReal(), imag-s.getImag());\n\t\t}\n\t\tComplex operator+=(const Complex &s) {\n\t\t\treal+=s.getReal();\n\t\t\timag+=s.getImag();\n\t\t}\n\t\tComplex operator-=(const Complex &s) {\n\t\t\treal-=s.getReal();\n\t\t\timag-=s.getImag();\n\t\t}\n\tprivate:\n\t\tint real;\n\t\tint imag;\n};\n\n"}, "standard_output": {"standard_output0": "a(1, 2)\nb(2, 3)\nc(3, 5)\nd(-1, -1)\nc(2, 4)\nc(1, 2)\n"}, "standard_input": {"standard_input0": ""}, "hidden_support": {}, "random_source": {}}, "ptype_id": 0, "title": "From Sicily::2256 - operator overloading::1004::Complex =,-,+=,-=", "config": {"language": ["c++"], "random": {"compile_command": "gcc SOURCE -w -std=c++14 -o random", "run_times": 0}, "exec_flag": "--gtest_output=xml:/tmp/Result.xml", "limits": {"time": 1000, "memory": 32}, "output_program": "main.exe", "standard_score": 100, "standard": {"standard_input": ["standard_input0"], "support": ["framework.cpp"], "hidden_support": [], "standard_output": ["standard_output0"], "random_source": []}, "compilers": {"c++": {"version": "default", "command": "g++ framework.cpp -g -w -lm -std=c++14 -o OUTPUT_PROGRAM"}, "clang": {"version": "default", "command": "clang framework.cpp -g -w -lm -o OUTPUT_PROGRAM"}, "clang++": {"version": "default", "command": "clang++ framework.cpp -g -w -lm -std=c++11 -o OUTPUT_PROGRAM"}, "c": {"version": "default", "command": "gcc framework.cpp -g -w -lm -o OUTPUT_PROGRAM"}}, "grading": {"compile check": 10, "memory check": 0, "random tests": 0, "static check": 20, "google tests": 0, "standard tests": 70, "google tests detail": {}}, "google tests info": {}, "submission": ["source.h"], "standard_language": "c++", "entry_point": "standard_main.exe"}, "description": "# Description\n<div>&nbsp;</div>\r\n<div style=\"text-indent: 21pt;\"><font size=\"3\">You are to overload the operators +,-,+=,-=&nbsp;for the following Complex&nbsp;class, which means the add/subtract&nbsp;operations for complex numbers.</font></div>\r\n<div>&nbsp;</div>\r\n<div><span style=\"color: rgb(0, 0, 255);\"><font size=\"3\">class Complex<br />\r\n{<br />\r\npublic:<br />\r\n&nbsp;&nbsp;&nbsp; Complex(): real(0), imag(0) {}<br />\r\n&nbsp;&nbsp;&nbsp; Complex(int a, int b): real(a), imag(b) {}<br />\r\n&nbsp;&nbsp;&nbsp; int getReal() const { return real; }<br />\r\n&nbsp;&nbsp;&nbsp; int getImag() const { return imag; }<br />\r\nprivate:<br />\r\n&nbsp;&nbsp;&nbsp; int real;<br />\r\n&nbsp;&nbsp;&nbsp; int imag;<br />\r\n};</font></span></div>\r\n<div>&nbsp;</div>\r\n<div style=\"text-indent: 21pt;\"><font size=\"3\">Your submitted source code should include the implementation of class&nbsp;Complex and the required operators.</font></div>\r\n<div style=\"text-indent: 21pt;\"><font size=\"3\">No main() function should be included.</font></div>\n# Input\n\n# Output\n\n# Sample_Input\n```\n\n```\n# Sample_Ouput\n```\n\n```\n# Hint\n\n"}