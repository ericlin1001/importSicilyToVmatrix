{"title": "From Sicily::2256 - operator overloading::1003::The String class", "ptype_id": 0, "files": {"random_source": {}, "submission": {"source.h": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\n\nclass String {\n    string s;\n  public:\n    String() {\n        s = \"\";\n    }\n    String(const char* a) {\n        s = a;\n    }\n    String(const String& a) {\n        s = a.s;\n    }\n    String& operator=(const char * a) {\n        s = a;\n        return *this;\n    }\n    String& operator=(const String& a) {\n        s = a.s;\n        return *this;\n    }\n    String operator+(String a) {\n        String b;\n        b.s = s + a.s;\n        return b; \n    }\n    char& operator[](int i) {\n        return s[i];\n    }\n    char operator[](int i) const {\n        return s[i];\n    }\n    int size() const {\n        return s.size();\n    }\n    String& operator+=(const String& a) {\n        s += a.s;\n        return *this;\n    }\n    String& operator+=(const char* a) {\n        s += a;\n        return *this;\n    }\n    friend ostream& operator<<(ostream& out, const String& a) {\n        out << a.s;\n        return out;\n    }\n    friend istream& operator>>(istream& in, String& a) {\n        in >> a.s;\n        return in;\n    }\n    friend bool operator==(const String& x, const char* s) {\n        if (x.s == s) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n    friend bool operator==(const String& x, const String& y) {\n        if (x.s == y.s) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n    friend bool operator!=(const String& x, const char* s) {\n        if (x.s != s) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n    friend bool operator!=(const String& x, const String& y) {\n        if (x.s != y.s) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    } \n};                                 \n\n"}, "hidden_support": {}, "standard_output": {"standard_output0": "Please enter two strings\nx= 123 , y = 45678\nin f: 12x 45678 6\n45678\ns = \"\"\ns = \"abc\"\n\"123\" + \"45678\" = \"12345678\"\nexit: !23 123\nexit: !bc abc\n"}, "support": {"framework.cpp": "#include<iostream>\n#include\"source.h\"\nusing namespace std;\nString f1(String a, String b)\n{\n\ta[2] = 'x';\n\tchar c = b[2];\n\tcout << \"in f: \" << a << ' ' << b << ' ' << c << '\\n';\n\treturn b;\n}\n\nvoid f2(String s, const String& r)\n{\n\tchar c1 = s[1];\t// c1 = s.operator[](1).operator char()\n\ts[1] = 'c';\t\t// s.operator[](1).operator=('c')\n\n\tchar c2 = r[1];\t// c2 = r.operator[](1)\n//\tr[1] = 'd';\t\t// error: assignment to non-lvalue char, r.operator[](1) = 'd'\n}\n\nvoid f()\n{\n\tString x, y, s;\n\tcout << \"Please enter two strings\\n\";\n\tcin >> x >> y;\n\tcout << \"x= \" << x << \" , y = \" << y << '\\n';\n\n    y = f1(x,y);\n    cout << y << endl;\n    \n    f2(x,y);\n\n\tcout << \"s = \\\"\" << s << \"\\\"\" << endl;\n\ts = \"abc\";\n\tcout << \"s = \\\"\" << s << \"\\\"\" << endl;\n\n    cout << \"\\\"\" << x << \"\\\" + \\\"\" << y << \"\\\" = \" << \"\\\"\" << x+y << \"\\\"\\n\";\n\tString z = x;\n\tif (x != z) cout << \"x corrupted!\\n\";\n\tx[0] = '!';\n\tif (x == z) cout << \"write failed!\\n\";\n\tcout << \"exit: \" << x << ' ' << z << '\\n';\t\n\n    z = s;\n\tif (s != z) cout << \"s corrupted!\\n\";\n\ts[0] = '!';\n\tif (s == z) cout << \"write failed!\\n\";\n\tcout << \"exit: \" << s << ' ' << z << '\\n';\t\n\n}\n\nint main()\n{\n  f();\n}\n"}, "standard_input": {"standard_input0": "123 45678\n"}}, "description": "# Description\n<p>Implement the String class:<br />\r\nclass String {<br />\r\npublic:<br />\r\n&nbsp;&nbsp;&nbsp; String();&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // x = &quot;&quot;<br />\r\n&nbsp;&nbsp;&nbsp; String(const char*);&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // x = &quot;abc&quot; <br />\r\n&nbsp;&nbsp;&nbsp; String(const String&amp;);&nbsp;&nbsp;&nbsp; // x = other_string<br />\r\n&nbsp;&nbsp;&nbsp; String&amp; operator=(const char *);<br />\r\n&nbsp;&nbsp;&nbsp; String&amp; operator=(const String&amp;);<br />\r\n&nbsp;&nbsp;&nbsp; <span style=\"color: rgb(255, 0, 0);\">String operator+(String);</span><br />\r\n&nbsp;&nbsp;&nbsp; char&amp; operator[](int i);<br />\r\n&nbsp;&nbsp;&nbsp; char operator[](int i) const;<br />\r\n&nbsp;&nbsp;&nbsp; int size() const;<br />\r\n&nbsp;&nbsp;&nbsp; String&amp; operator+=(const String&amp;);<br />\r\n&nbsp;&nbsp;&nbsp; String&amp; operator+=(const char*);<br />\r\n&nbsp;&nbsp;&nbsp; friend ostream&amp; operator&lt;&lt;(ostream&amp;, const String&amp;);<br />\r\n&nbsp;&nbsp;&nbsp; friend istream&amp; operator&gt;&gt;(istream&amp;, String&amp;);<br />\r\n&nbsp;&nbsp;&nbsp; friend bool operator==(const String&amp; x, const char* s);<br />\r\n&nbsp;&nbsp;&nbsp; friend bool operator==(const String&amp; x, const String&amp; y);<br />\r\n&nbsp;&nbsp;&nbsp; friend bool operator!=(const String&amp; x, const char* s);<br />\r\n&nbsp;&nbsp;&nbsp; friend bool operator!=(const String&amp; x, const String&amp; y);<br />\r\n};<br />\r\nThe String class implemented may be used like this:<br />\r\nf()<br />\r\n{<br />\r\n&nbsp;&nbsp;&nbsp; String x, y, s;<br />\r\n&nbsp;&nbsp;&nbsp; cout &lt;&lt; &quot;Please enter two strings\\n&quot;;<br />\r\n&nbsp;&nbsp;&nbsp; cin &gt;&gt; x &gt;&gt; y;<br />\r\n&nbsp;&nbsp;&nbsp; cout &lt;&lt; &quot;x= &quot; &lt;&lt; x &lt;&lt; &quot; , y = &quot; &lt;&lt; y &lt;&lt; '\\n';<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; cout &lt;&lt; &quot;s = \\&quot;&quot; &lt;&lt; s &lt;&lt; &quot;\\&quot;&quot; &lt;&lt; endl;<br />\r\n&nbsp;&nbsp;&nbsp; s = &quot;abc&quot;;<br />\r\n&nbsp;&nbsp;&nbsp; cout &lt;&lt; &quot;s = \\&quot;&quot; &lt;&lt; s &lt;&lt; &quot;\\&quot;&quot; &lt;&lt; endl;<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; cout &lt;&lt; &quot;\\&quot;&quot; &lt;&lt; x &lt;&lt; &quot;\\&quot; + \\&quot;&quot; &lt;&lt; y &lt;&lt; &quot;\\&quot; = &quot; &lt;&lt; &quot;\\&quot;&quot; &lt;&lt; x+y &lt;&lt; &quot;\\&quot;\\n&quot;;<br />\r\n&nbsp;&nbsp;&nbsp; String z = x;<br />\r\n&nbsp;&nbsp;&nbsp; if (x != z) cout &lt;&lt; &quot;x corrupted!\\n&quot;;<br />\r\n&nbsp;&nbsp;&nbsp; x[0] = '!';<br />\r\n&nbsp;&nbsp;&nbsp; if (x == z) cout &lt;&lt; &quot;write failed!\\n&quot;;<br />\r\n&nbsp;&nbsp;&nbsp; cout &lt;&lt; &quot;exit: &quot; &lt;&lt; x &lt;&lt; ' ' &lt;&lt; z &lt;&lt; '\\n';&nbsp;&nbsp;&nbsp; <br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; z = s;<br />\r\n&nbsp;&nbsp;&nbsp; if (s != z) cout &lt;&lt; &quot;s corrupted!\\n&quot;;<br />\r\n&nbsp;&nbsp;&nbsp; s[0] = '!';<br />\r\n&nbsp;&nbsp;&nbsp; if (s == z) cout &lt;&lt; &quot;write failed!\\n&quot;;<br />\r\n&nbsp;&nbsp;&nbsp; cout &lt;&lt; &quot;exit: &quot; &lt;&lt; s &lt;&lt; ' ' &lt;&lt; z &lt;&lt; '\\n';&nbsp;&nbsp;&nbsp; <br />\r\n}<br />\r\nThe f() will has the same output when String replace by string in STL.<br />\r\n&nbsp;</p>\n# Input\n\n# Output\n\n# Sample_Input\n```\n\n```\n# Sample_Ouput\n```\n\n```\n# Hint\n\n", "config": {"limits": {"time": 1000, "memory": 32}, "grading": {"standard tests": 70, "compile check": 10, "google tests detail": {}, "static check": 20, "memory check": 0, "google tests": 0, "random tests": 0}, "language": ["c++"], "standard_language": "c++", "entry_point": "standard_main.exe", "standard_score": 100, "random": {"run_times": 0, "compile_command": "gcc SOURCE -w -std=c++14 -o random"}, "submission": ["source.h"], "output_program": "main.exe", "exec_flag": "--gtest_output=xml:/tmp/Result.xml", "compilers": {"c": {"version": "default", "command": "gcc framework.cpp -g -w -lm -o OUTPUT_PROGRAM"}, "c++": {"version": "default", "command": "g++ framework.cpp -g -w -lm -std=c++14 -o OUTPUT_PROGRAM"}, "clang++": {"version": "default", "command": "clang++ framework.cpp -g -w -lm -std=c++11 -o OUTPUT_PROGRAM"}, "clang": {"version": "default", "command": "clang framework.cpp -g -w -lm -o OUTPUT_PROGRAM"}}, "standard": {"random_source": [], "support": ["framework.cpp"], "standard_output": ["standard_output0"], "hidden_support": [], "standard_input": ["standard_input0"]}, "google tests info": {}}}