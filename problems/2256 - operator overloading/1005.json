{"title": "From Sicily::2256 - operator overloading::1005::Overloading \">>\", \"<<\"", "description": "# Description\n<div>&nbsp;</div>\r\n<div style=\"text-indent: 21pt\"><font size=\"3\">You are to overload the operators &quot;&gt;&gt;&quot;, &quot;&lt;&lt;&quot;, &quot;*&quot;&nbsp;for&nbsp;the Complex&nbsp;class, which respectively mean reading an object from a stream,&nbsp;sending an object to a stream,&nbsp;&nbsp;and&nbsp;the&nbsp;&quot;multiply&quot;&nbsp;operation for complex numbers.</font></div>\r\n<div>&nbsp;</div>\r\n<div><span style=\"color: #0000ff\"><font size=\"3\">class Complex<br />\r\n{<br />\r\npublic:<br />\r\n&nbsp;&nbsp;&nbsp; Complex(int a=0, int b=0): real(a), imag(b) {}<br />\r\n&nbsp;&nbsp;&nbsp; friend Complex operator*(const Complex&amp;, const Complex&amp;);<br />\r\n&nbsp;&nbsp;&nbsp; friend istream&amp; operator&gt;&gt;(istream&amp;, Complex&amp;);<br />\r\n&nbsp;&nbsp;&nbsp; friend ostream&amp; operator&lt;&lt;(ostream&amp;, const Complex&amp;);<br />\r\nprivate:<br />\r\n&nbsp;&nbsp;&nbsp; int real;<br />\r\n&nbsp;&nbsp;&nbsp; int imag;<br />\r\n};</font></span></div>\r\n<div>&nbsp;</div>\r\n<div style=\"text-indent: 21pt\"><font size=\"3\">Your submitted source code should include the implementation of the required operators, but without the Complex class.</font></div>\r\n<div style=\"text-indent: 21pt\"><font size=\"3\">No main() function should be included.</font></div>\r\n<p>&nbsp;</p>\n# Input\n<div style=\"text-indent: 21pt\"><font size=\"3\">The complex numbers have the form &quot;a+bi&quot;, or &quot;a-bi&quot;, where &quot;a&quot; is an integer, &quot;b&quot; is a non-negative integer, and there is no space&nbsp;inside the string. There is white space separating consecutive complex numbers. You're&nbsp;ensured that the input is correct.&nbsp;</font></div>\n# Output\n<div style=\"text-indent: 21pt\"><font size=\"3\">To make it simple, output the complex numbers in the form &quot;a+bi&quot;, or &quot;a-bi&quot;, where &quot;a&quot; is an integer, &quot;b&quot; is a non-nagative integer, even if a or b&nbsp;is zero,&nbsp;e.g., &quot;0+0i&quot;, &quot;3+0i&quot;, &quot;0-3i&quot;. Your output should contain nothing else&nbsp;but the string &quot;a+bi&quot; or &quot;a-bi&quot;.</font></div>\r\n<p>&nbsp;</p>\n# Sample_Input\n```\n\n```\n# Sample_Ouput\n```\n\n```\n# Hint\n\n", "ptype_id": 0, "files": {"hidden_support": {}, "standard_output": {"standard_output0": "0+0i\n47-1i\n5-4i\n3-2i\n2+0i\n"}, "standard_input": {"standard_input0": "5\n0+0i 3+5i\n3+5i 4-7i\n0-1i 4+5i\n3-2i 1-0i\n1+1i 1-1i\n"}, "random_source": {}, "submission": {"source.h": "Complex operator*(const Complex &c1, const Complex &c2) {\n\tComplex temp;\n\ttemp.real = c1.real * c2.real - c2.imag * c1.imag;\n\ttemp.imag = c1.real * c2.imag + c2.real * c1.imag;\n\treturn temp;\n}\nistream& operator>>(istream &input, Complex& k) {\n\tstring temp;\n\tinput >> temp;\n\tint i, j;\n\tif (temp[0] != '-') k.real = temp[0] - '0';\n\telse k.real = -1;\n\tfor (i = 1; temp[i] >= '0' && temp[i] <='9'; ++i) {\n\n\t\tk.real = 10 * k.real + temp[i] - '0';\n\t}\n\tfor (j = i + 1; j <= temp.length() - 2; ++j) {\n\t\tk.imag = 10 * k.imag + temp[j] - '0';\n\t}\n\tif (temp[i] == '-') k.imag*= -1;\n\treturn input;\n}\nostream& operator<<(ostream &output, const Complex &k) {\n\toutput << k.real;\n\tif (k.imag >= 0) output << '+';\n\toutput << k.imag << 'i';\n\treturn output;\n}\n\n"}, "support": {"framework.cpp": "#include <iostream>\nusing namespace std;\n\n\nclass Complex\n{\npublic:\n\tComplex(int a=0, int b=0): real(a), imag(b) {}\n\tfriend Complex operator*(const Complex&, const Complex&);\n\tfriend istream& operator>>(istream&, Complex&);\n\tfriend ostream& operator<<(ostream&, const Complex&);\n\nprivate:\n\tint real;\n\tint imag;\n};\n\n#include \"source.h\"\n\nint main()\n{\n\t//freopen(\"test01.in\", \"r\", stdin);\n\t//freopen(\"test01.out\", \"w\", stdout);\n\tint t;\n\tcin>>t;\n\twhile(t--) {\n\t\tComplex a, b;\n\t\tcin >> a>> b;\n\t\tcout << a * b << endl; \n\t}\n\n\treturn 0;\n}"}}, "config": {"exec_flag": "--gtest_output=xml:/tmp/Result.xml", "compilers": {"clang": {"version": "default", "command": "clang framework.cpp -g -w -lm -o OUTPUT_PROGRAM"}, "c": {"version": "default", "command": "gcc framework.cpp -g -w -lm -o OUTPUT_PROGRAM"}, "clang++": {"version": "default", "command": "clang++ framework.cpp -g -w -lm -std=c++11 -o OUTPUT_PROGRAM"}, "c++": {"version": "default", "command": "g++ framework.cpp -g -w -lm -std=c++14 -o OUTPUT_PROGRAM"}}, "language": ["c++"], "output_program": "main.exe", "limits": {"time": 1000, "memory": 32}, "google tests info": {}, "standard_language": "c++", "entry_point": "standard_main.exe", "random": {"compile_command": "gcc SOURCE -w -std=c++14 -o random", "run_times": 0}, "standard_score": 100, "standard": {"hidden_support": [], "standard_output": ["standard_output0"], "support": ["framework.cpp"], "random_source": [], "standard_input": ["standard_input0"]}, "submission": ["source.h"], "grading": {"memory check": 0, "compile check": 10, "google tests": 0, "random tests": 0, "static check": 20, "google tests detail": {}, "standard tests": 70}}}