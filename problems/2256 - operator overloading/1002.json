{"title": "From Sicily::2256 - operator overloading::1002::The Date class (version 3)", "ptype_id": 0, "files": {"standard_output": {"standard_output0": "date = 0-1-1\ndate+1 = 0-1-2\ndate-1 = -1-12-31\ndate = 1-1-1\ndate = 0-1-2\ndate = 1-1-1\ndate = 0-1-1\n\ndate = 2004-2-28\ndate+1 = 2004-2-29\ndate-1 = 2004-2-27\ndate = 2005-2-28\ndate = 2004-2-29\ndate = 2005-2-28\ndate = 2004-2-28\n\ndate = 2007-2-28\ndate+1 = 2007-3-1\ndate-1 = 2007-2-27\ndate = 2008-2-29\ndate = 2007-3-1\ndate = 2008-2-29\ndate = 2007-2-28\n\ndate = 2000-2-28\ndate+1 = 2000-2-29\ndate-1 = 2000-2-27\ndate = 2001-2-28\ndate = 2000-2-29\ndate = 2001-2-28\ndate = 2000-2-28\n\ndate = 99-12-31\ndate+1 = 100-1-1\ndate-1 = 99-12-30\ndate = 101-1-1\ndate = 100-1-1\ndate = 101-1-1\ndate = 99-12-31\n\n"}, "standard_input": {"standard_input0": ""}, "hidden_support": {}, "support": {"framework.cpp": "#include<iostream>\n#include<string>\n#include\"source.h\"\nusing namespace std;\n\nostream& operator<<(ostream& os, const Date& date)\n{\n  os << date.getYear() << \"-\" << date.getMonth() << \"-\" << date.getDay();\n  return os;\n}\n\n/* \nf1() test for:\n  constructor, copy constructor, assign assignment\n  static member function leapyear()\n  operator ==, !=, <, <=, >, >=\n*/\nvoid f1()\n{\n  Date date1, date2(2003,1,1);\n  Date date3 = Date(2007,2,28);\n  cout << \"date1: \" << date1 << endl;\n  cout << \"date2: \" << date2 << endl;\n  \n  cout << \"date3 after copy constructor: \" << date3 << endl;\n  date3 = date1;\n  cout << \"date3 after copy asignment: \" << date3 << endl;  \n\n  cout << \"year 1996 is leap year? \" << Date::leapyear(1996) << endl;\n  cout << \"year 1200 is leap year? \" << Date::leapyear(1200) << endl;\n  cout << \"year 1300 is leap year? \" << Date::leapyear(1300) << endl;\n  cout << \"year 1999 is leap year? \" << Date::leapyear(1999) << endl;\n\n  cout <<  \"(date1==date3)? \" << (date1==date3) << endl;\n  cout <<  \"(date1!=date3)? \" << (date1!=date3) << endl;\n  cout <<  \"(date1==date2)? \" << (date1==date2) << endl;\n  cout <<  \"(date1!=date2)? \" << (date1!=date2) << endl;\n\n  cout <<  \"(date1<date1)? \" << (date1<date1) << endl;\n  cout <<  \"(date1<=date1)? \" << (date1<=date1) << endl;\n  cout <<  \"(date1<date2)? \" << (date1<date2) << endl;\n  cout <<  \"(date1<=date2)? \" << (date1<=date2) << endl;\n  \n  cout <<  \"(date1>date1)? \" << (date1>date1) << endl;\n  cout <<  \"(date1>=date1)? \" << (date1>=date1) << endl;\n  cout <<  \"(date1>date2)? \" << (date1>date2) << endl;\n  cout <<  \"(date1>=date2)? \" << (date1>=date2) << endl;\n\n}\n/*\nf2() test for:\n  subscript opeartor [] as both lvalue and rvalue\n*/\nvoid f2()\n{\n  Date date1(2011,4,1);\n  cout << \"date1: \" << date1 << endl;\n  cout << date1[\"year\"] << endl;\n  cout << date1[\"month\"] << endl;\n  cout << date1[\"day\"] << endl;  \n  date1[\"year\"] = 2000;\n  date1[\"month\"] = 10;\n  date1[\"day\"] = 10;\n \n  cout << \"date1: \" << date1 << endl;\n}\n\n/*\nf3_0() test for:\n  operator \n  +=, -=, \n  +, -, \n*/\nvoid f3_0(const Date& d)\n{\n  Date date = d;\n\n  cout << \"date = \" << date << endl;\n  cout << \"date+1 = \" << date+1 << endl;\n  cout << \"date-1 = \" << date-1 << endl;\n\n  date+=366;\n  cout << \"date = \" << date << endl;\n  date-=365;\n  cout << \"date = \" << date << endl;\n  date-=-365;\n  cout << \"date = \" << date << endl;\n  date+=-366;\n  cout << \"date = \" << date << endl;\n      \n  cout << endl;\n}\n/*\nf3_1() test for:\n  operator \n  ++(prefix), --(prefix), \n  ++(postfix), --(postfix), \n  +=, -=, \n  +, -, \n  <<\n*/\n\nvoid f3_1(const Date& d)\n{\n  Date date = d;\n  cout << \"date = \" << date << endl;\n  cout << \"++date = \" << ++date << endl;\n  cout << \"--date = \" << --date << endl;\n  cout << \"date++ = \" << date++ << endl;\n  cout << \"date-- = \" << date-- << endl;\n  cout << \"date = \" << date << endl;\n  date+=366;\n  cout << \"date = \" << date << endl;\n  date-=365;\n  cout << \"date = \" << date << endl;\n  date-=-365;\n  cout << \"date = \" << date << endl;\n  date+=-366;\n  cout << \"date = \" << date << endl;\n      \n  cout << endl;\n}\n\nvoid f3()\n{\n  Date date1, date2(2004,2,28), date3(2007,2,28),date4(2000,2,28),date5(99,12,31);\n  f3_0(date1);\n  f3_0(date2);\n  f3_0(date3);\n  f3_0(date4);\n  f3_0(date5);\n}\n\n\nint main()\n{\n  f3();\n  //system(\"PAUSE\");\n  return 0;\n}\n\n\n\n"}, "random_source": {}, "submission": {"source.h": "#include <iostream>\n#include <string>\nint num[13] = {31, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\nusing namespace std;\nclass Date {\n\tpublic:\n\t\tDate(int y=0, int m=1, int d=1);\n\t\tstatic bool leapyear(int year);\n\t\tint getYear() const;\n\t\tint getMonth() const;\n\t\tint getDay() const;\n\t\tDate operator ++();\n\t\tDate operator ++(int);\n\t\tDate operator --();\n\t\tDate operator --(int);\n\t\tDate operator +=(int);\n\t\tDate operator +(int);\n\t\tDate operator -=(int);\n\t\tDate operator -(int);\n\t\tint & operator [](string);\n\t\tfriend ostream& operator<<(ostream&, const Date&);\n\t\tint equal(Date &k);\n\t\tbool operator <(Date &k);\n\t\tbool operator <=(Date &k);\n\t\tbool operator ==(Date &k);\n\t\tbool operator !=(Date &k);\n\t\tbool operator >(Date &k);\n\t\tbool operator >=(Date &k);\n\tprivate:\n\t\tint year, month, day;\n};\nint & Date :: operator [](string s) {\n\tif (s == \"year\") return year;\n\tif (s == \"month\") return month;\n\tif (s == \"day\") return day;\n}\n\n\nbool Date:: leapyear(int year) {\n\tif ((year % 100 != 0 && year %4 == 0) || year % 400 == 0) return true;\n\telse\n\t\treturn false;\n}\nDate :: Date(int y, int m, int d) {\n\tyear = y;\n\tmonth = m;\n\tday = d;\n}\nint Date:: getYear() const {\n\treturn year;\n}\nint Date:: getMonth() const {\n\treturn month;\n}\nint Date:: getDay() const {\n\treturn  day;\n}\nDate Date::operator ++() {\n\t*this = *this + 1;\n\treturn *this;\n}\nDate Date::operator ++(int k) {\n\tDate temp = *this;\n\t*this = *this + 1;\n\treturn temp ;\n}\nDate Date::operator --() {\n\t*this = *this - 1;\n\treturn *this;\n}\nDate Date::operator --(int k) {\n\tDate temp = *this;\n\t*this = *this - 1;\n\treturn temp;\n}\nDate Date::operator +=(int k) {\n\t*this = *this + k;\n\treturn *this;\n}\nDate Date::operator -=(int k) {\n\t*this = *this - k;\n\treturn *this;\n}\nDate Date :: operator + (int k) {\n\tif (k < 0) return (*this - (-k));\n\tDate m = *this;\n\tm.day+= k;\n\tif (leapyear(m.year)) num[2] = 29;\n\telse num[2] = 28;\n\twhile (m.day > num[m.month]) {\n\t\tm.day-= num[m.month];\n\t\t++m.month;\n\t\tif (m.month > 12) {\n\t\t\tm.month = 1;\n\t\t\t++m.year;\n\t\t}\n\t\tif (leapyear(m.year)) num[2] = 29;\n\t\telse num[2] = 28;\n\t}\n\treturn m;\n}\nDate Date :: operator - (int k) {\n\tif (k < 0) return (*this + (-k));\n\tDate m = *this;\n\tm.day-= k;\n\tif (leapyear(m.year)) num[2] = 29;\n\telse num[2] = 28;\n\twhile (m.day <= 0) {\n\t\t--m.month;\n\t\tm.day+= num[m.month];\n\t\tif (m.month == 0) {\n\t\t\tm.month = 12;\n\t\t\t--m.year;\n\t\t}\n\t\tif (leapyear(m.year)) num[2] = 29;\n\t\telse num[2] = 28;\n\t}\n\treturn m;\n}\n\nint Date::equal(Date &k) {\n\tif (k.year != year) return (year - k.year);\n\telse if (k.month != month) return (month - k.month);\n\telse if (k.day != day) return (day - k.day);\n\telse return 0;\n}\n\nbool Date:: operator <(Date &k) {\n\tif (equal(k) < 0) return true;\n\telse return false;\n}\nbool Date:: operator <=(Date &k) {\n\tif (equal(k) <= 0) return true;\n\telse return false;\n}\nbool Date:: operator ==(Date &k) {\n\tif (equal(k) == 0) return true;\n\telse return false;\n}\nbool Date:: operator !=(Date &k) {\n\tif (equal(k) != 0) return true;\n\telse return false;\n}\nbool Date:: operator >(Date &k) {\n\tif (equal(k) > 0) return true;\n\telse return false;\n}\nbool Date:: operator >=(Date &k) {\n\tif (equal(k) >= 0) return true;\n\telse return false;\n}\n\n"}}, "config": {"language": ["c++"], "standard_language": "c++", "limits": {"time": 1000, "memory": 32}, "random": {"compile_command": "gcc SOURCE -w -std=c++14 -o random", "run_times": 0}, "google tests info": {}, "exec_flag": "--gtest_output=xml:/tmp/Result.xml", "submission": ["source.h"], "entry_point": "standard_main.exe", "output_program": "main.exe", "standard": {"standard_output": ["standard_output0"], "standard_input": ["standard_input0"], "hidden_support": [], "support": ["framework.cpp"], "random_source": []}, "compilers": {"clang++": {"command": "clang++ framework.cpp -g -w -lm -std=c++11 -o OUTPUT_PROGRAM", "version": "default"}, "c++": {"command": "g++ framework.cpp -g -w -lm -std=c++14 -o OUTPUT_PROGRAM", "version": "default"}, "c": {"command": "gcc framework.cpp -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}, "clang": {"command": "clang framework.cpp -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}}, "grading": {"static check": 20, "random tests": 0, "memory check": 0, "standard tests": 70, "google tests": 0, "compile check": 10, "google tests detail": {}}, "standard_score": 100}, "description": "# The Date class (version 3)\n\n# Description\n<pre>\r\nImplement the operator +=, -=, +, -, in the class Date\r\nclass Date\r\n{\r\npublic:\r\n  Date(int y=0, int m=1, int d=1);  \r\n  static bool leapyear(int year);\r\n  int getYear() const;\r\n  int getMonth() const;\r\n  int getDay() const;\r\n\r\n  // add any member you need here  \r\n};\r\n\r\nYou implementation should enable the usage like this:\r\nvoid f()\r\n{\r\n  Date date = d;\r\n\r\n  cout &lt;&lt; &quot;date = &quot; &lt;&lt; date &lt;&lt; endl;\r\n  cout &lt;&lt; &quot;date+1 = &quot; &lt;&lt; date+1 &lt;&lt; endl;\r\n  cout &lt;&lt; &quot;date-1 = &quot; &lt;&lt; date-1 &lt;&lt; endl;\r\n\r\n  date+=366;\r\n  cout &lt;&lt; &quot;date = &quot; &lt;&lt; date &lt;&lt; endl;\r\n  date-=365;\r\n  cout &lt;&lt; &quot;date = &quot; &lt;&lt; date &lt;&lt; endl;\r\n  date-=-365;\r\n  cout &lt;&lt; &quot;date = &quot; &lt;&lt; date &lt;&lt; endl;\r\n  date+=-366;\r\n  cout &lt;&lt; &quot;date = &quot; &lt;&lt; date &lt;&lt; endl;\r\n      \r\n  cout &lt;&lt; endl;\r\n}\r\n\r\n\r\nThe output of f() should be:\r\n\r\ndate = 2004-2-28\r\ndate+1 = 2004-2-29\r\ndate-1 = 2004-2-27\r\ndate = 2005-2-28\r\ndate = 2004-2-29\r\ndate = 2005-2-28\r\ndate = 2004-2-28\r\n\r\n\u63d0\u4ea4\u65f6\u4e0d\u9700\u8981\u63d0\u4ea4operator &lt;&lt; \u91cd\u8f7d\u3002</pre>\n\n# Input\n\n\n# Output\n\n\n# Sample_Input\n```\n\n```\n\n# Sample_Ouput\n```\n\n```\n\n# Hint\n\n\n"}