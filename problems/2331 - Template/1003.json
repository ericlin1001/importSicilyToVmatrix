{"description": "# Description\n<p>Given the following two classes TypeA, and TypeB: <br />\r\nclass TypeA<br />\r\n{<br />\r\npublic:<br />\r\n&nbsp; class SubType<br />\r\n&nbsp; {<br />\r\n&nbsp; public:<br />\r\n&nbsp;&nbsp;&nbsp; string toString() {return &quot;subType in TypeA&quot;;};<br />\r\n&nbsp; };<br />\r\n};<br />\r\n<br />\r\nclass TypeB<br />\r\n{<br />\r\npublic:<br />\r\n&nbsp; class SubType<br />\r\n&nbsp; {<br />\r\n&nbsp; public:<br />\r\n&nbsp;&nbsp;&nbsp; string toString() {return &quot;subType in TypeB&quot;;};<br />\r\n&nbsp; };<br />\r\n};<br />\r\n<br />\r\nWrite a template class MyClass that has a public variable named <strong>subtypeobj</strong> with type <strong>T::SubType</strong>.<br />\r\ntemplate &lt;class T&gt;<br />\r\nclass MyClass<br />\r\n{<br />\r\npublic:<br />\r\n//add your public member here<br />\r\n}<br />\r\n<br />\r\n&nbsp; The following codes:<br />\r\nMyClass&lt;TypeA&gt; obj1;<br />\r\ncout &lt;&lt; obj1.subtypeobj.toString() &lt;&lt; endl;<br />\r\nMyClass&lt;TypeB&gt; obj2;<br />\r\ncout &lt;&lt; obj2.subtypeobj.toString() &lt;&lt; endl;<br />\r\n<br />\r\n&nbsp; output:<br />\r\nsubType in TypeA<br />\r\nsubType in TypeB<br />\r\n&nbsp;</p>\n# Input\n\n# Output\n\n# Sample_Input\n```\n\n```\n# Sample_Ouput\n```\n\n```\n# Hint\n\n", "ptype_id": 0, "config": {"grading": {"standard tests": 70, "memory check": 0, "google tests detail": {}, "google tests": 0, "compile check": 10, "static check": 20, "random tests": 0}, "compilers": {"c": {"version": "default", "command": "gcc framework.cpp -g -w -lm -o OUTPUT_PROGRAM"}, "clang++": {"version": "default", "command": "clang++ framework.cpp -g -w -lm -std=c++11 -o OUTPUT_PROGRAM"}, "c++": {"version": "default", "command": "g++ framework.cpp -g -w -lm -std=c++14 -o OUTPUT_PROGRAM"}, "clang": {"version": "default", "command": "clang framework.cpp -g -w -lm -o OUTPUT_PROGRAM"}}, "submission": ["source.h"], "google tests info": {}, "standard_language": "c++", "standard_score": 100, "exec_flag": "--gtest_output=xml:/tmp/Result.xml", "standard": {"standard_output": ["standard_output0"], "standard_input": ["standard_input0"], "support": ["framework.cpp"], "hidden_support": [], "random_source": []}, "language": ["c++"], "limits": {"time": 1000, "memory": 32}, "random": {"run_times": 0, "compile_command": "gcc SOURCE -w -std=c++14 -o random"}, "output_program": "main.exe", "entry_point": "standard_main.exe"}, "files": {"standard_output": {"standard_output0": "subType in TypeB\nsubType in TypeA\nsubType in TypeA\nsubType in TypeB\n"}, "standard_input": {"standard_input0": ""}, "support": {"framework.cpp": "#include<iostream>\n#include<string>\n#include\"source.h\"\nusing namespace std;\n\n\nint main()\n{\n  MyClass<TypeB> obj2;\n  cout << obj2.subtypeobj.toString() << endl;\n\n  MyClass<TypeA> obj1;\n  cout << obj1.subtypeobj.toString() << endl;\n\n  MyClass<TypeA> obj3;\n  cout << obj3.subtypeobj.toString() << endl;\n\n  MyClass<TypeB> obj4;\n  cout << obj4.subtypeobj.toString() << endl;\n\n  return 0;\n}\n"}, "hidden_support": {}, "submission": {"source.h": "#include<iostream>\n#include<string>\nusing namespace std;\nclass TypeA {\n\tpublic:\n\t\tclass SubType {\n\t\t\tpublic:\n\t\t\t\tstring toString() {\n\t\t\t\t\treturn \"subType in TypeA\";\n\t\t\t\t};\n\t\t};\n};\n\nclass TypeB {\n\tpublic:\n\t\tclass SubType {\n\t\t\tpublic:\n\t\t\t\tstring toString() {\n\t\t\t\t\treturn \"subType in TypeB\";\n\t\t\t\t};\n\t\t};\n};\n\ntemplate <class T>\nclass MyClass {\n\tpublic:\n//add your public member here\n\t\tclass T::SubType subtypeobj;\n};\n\n"}, "random_source": {}}, "title": "From Sicily::2331 - Template::1003::typename! typename!"}