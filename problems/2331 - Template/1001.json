{"title": "From Sicily::2331 - Template::1001::The stack class", "files": {"submission": {"source.h": "#include <iostream>\nusing namespace std;\n\ntemplate<typename T, int capacity>\nStack<T,capacity>::Stack() {\n\telements = new T[capacity];\n\tnum = 0;\n}\n\ntemplate<typename T, int capacity>\nbool Stack<T,capacity>::empty() {\n\tif (num == 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\ntemplate<typename T, int capacity>\nT Stack<T,capacity>::peek() {\n\tif(num != 0)\n\t\treturn elements[0];\n}\n\ntemplate<typename T, int capacity>\nvoid Stack<T,capacity>::push(T value) {\n\tint i;\n\tint j = num;\n\tif ( num < capacity) {\n\t\tfor (i = 0; i < num; i++) {\n\t\t\telements[j] = elements[j - 1];\n\t\t\tj--;\n\t\t}\n\t\telements[0] = value;\n\t\tnum++;\n\t}\n}\n\ntemplate<typename T, int capacity>\nT Stack<T,capacity>::pop() {\n\tif (num != 0) {\n\t\tT temp = elements[0];\n\t\tint i;\n\t\tfor (i = 0; i < num - 1; i++) {\n\t\t\telements[i] = elements[i + 1];\n\t\t}\n\t\tnum--;\n\t\treturn temp;\n\t}\n}\n\ntemplate<typename T, int capacity>\nint Stack<T,capacity>::size() {\n\treturn num;\n}\n\n"}, "hidden_support": {}, "random_source": {}, "standard_output": {"standard_output0": "15\n14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 \nLondon Denver Chicago \n"}, "standard_input": {"standard_input0": ""}, "support": {"framework.cpp": "#include<iostream>\n#include<string>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\ntemplate<typename T, int capacity>\nclass Stack\n{\npublic:\n\tStack();            // Constructs an empty stack.\n\tbool empty();       // Returns true if the stack is empty.\n\tT peek();           // Returns the element at the top of the stack without removing it from the stack.\n\tvoid push(T value); // Stores an element into the top of the stack.\n\tT pop();            // Removes the element at the top of the stack and returns it.\n\tint size();         // Returns the number of elements in the stack.\nprivate:\n\tT* elements;        // Points to an array that stores elements in the stack.\n\tint num;            // The number of the elements in the stack.\n};\n\n#include \"source.h\"\n\nint main()\n{\n\t//freopen(\"test01.in\", \"r\", stdin);\n\t//freopen(\"test01.out\", \"w\", stdout);\n\n\tStack<int,15> intStack;\n\tfor (int i = 0; i < 15; i++) intStack.push(i);\n\n\tcout<<intStack.size()<<endl;\n\twhile (!intStack.empty()) {\n\t\tcout << intStack.peek() << \" \";\n\t\tintStack.pop();\n\t}\n\tcout << endl;\n\n\tStack<string,3> stringStack;\n\tstringStack.push(\"Chicago\");\n\tstringStack.push(\"Denver\");\n\tstringStack.push(\"London\");\n\n\twhile (!stringStack.empty())\n\t\tcout << stringStack.pop() << \" \";\n\tcout << endl;\n\n\treturn 0;\n}"}}, "config": {"submission": ["source.h"], "language": ["c++"], "random": {"compile_command": "gcc SOURCE -w -std=c++14 -o random", "run_times": 0}, "output_program": "main.exe", "google tests info": {}, "grading": {"static check": 20, "google tests": 0, "memory check": 0, "google tests detail": {}, "compile check": 10, "standard tests": 70, "random tests": 0}, "compilers": {"c": {"command": "gcc framework.cpp -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}, "clang": {"command": "clang framework.cpp -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}, "clang++": {"command": "clang++ framework.cpp -g -w -lm -std=c++11 -o OUTPUT_PROGRAM", "version": "default"}, "c++": {"command": "g++ framework.cpp -g -w -lm -std=c++14 -o OUTPUT_PROGRAM", "version": "default"}}, "standard": {"hidden_support": [], "standard_output": ["standard_output0"], "standard_input": ["standard_input0"], "support": ["framework.cpp"], "random_source": []}, "entry_point": "standard_main.exe", "exec_flag": "--gtest_output=xml:/tmp/Result.xml", "standard_language": "c++", "limits": {"time": 1000, "memory": 32}, "standard_score": 100}, "ptype_id": 0, "description": "# Description\n<div>&nbsp;</div>\r\n<div style=\"text-indent: 21pt\"><font size=\"3\">You are to implement the following Stack class template, using the nontype parameter <span style=\"color: #0000ff\">capacity</span> to allocate the capacity of the stack, i.e. maximum&nbsp;elements that can be stored in the stack.</font></div>\r\n<div>&nbsp;</div>\r\n<div><span style=\"color: #0000ff\"><font size=\"3\">template&lt;typename T, int capacity&gt;<br />\r\nclass Stack<br />\r\n{<br />\r\npublic:<br />\r\n&nbsp;&nbsp;&nbsp; Stack();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Constructs an empty stack.<br />\r\n&nbsp;&nbsp;&nbsp; bool empty();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;// Returns true if the stack is empty.<br />\r\n&nbsp;&nbsp;&nbsp; T peek();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Returns the element at the top of the stack without removing it from the stack.<br />\r\n&nbsp;&nbsp;&nbsp; void push(T value); // Stores an element into the top of the stack.<br />\r\n&nbsp;&nbsp;&nbsp; T pop();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Removes the element at the top of the stack and returns it.<br />\r\n&nbsp;&nbsp;&nbsp; int size();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Returns the number of elements in the stack.<br />\r\nprivate:<br />\r\n&nbsp;&nbsp;&nbsp; T* elements;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Points to an array that stores elements in the stack.<br />\r\n&nbsp;&nbsp;&nbsp; int num;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // The number of the elements in the stack.<br />\r\n};</font></span></div>\r\n<div>&nbsp;</div>\r\n<div style=\"text-indent: 21pt\"><font size=\"3\">Your submitted source code should&nbsp;only include the implementation of Stack class template,&nbsp;without the declaration above.</font></div>\r\n<div style=\"text-indent: 21pt\"><font size=\"3\">No main() function should be included.</font></div>\r\n<p>&nbsp;</p>\n# Input\n\n# Output\n\n# Sample_Input\n```\n\n```\n# Sample_Ouput\n```\n\n```\n# Hint\n\n"}