{"config": {"exec_flag": "--gtest_output=xml:/tmp/Result.xml", "entry_point": "standard_main.exe", "random": {"run_times": 0, "compile_command": "gcc SOURCE -w -std=c++14 -o random"}, "google tests info": {}, "grading": {"memory check": 0, "google tests": 0, "random tests": 0, "compile check": 10, "static check": 20, "google tests detail": {}, "standard tests": 70}, "language": ["c++"], "standard_score": 100, "compilers": {"clang++": {"version": "default", "command": "clang++ framework.cpp -g -w -lm -std=c++11 -o OUTPUT_PROGRAM"}, "clang": {"version": "default", "command": "clang framework.cpp -g -w -lm -o OUTPUT_PROGRAM"}, "c++": {"version": "default", "command": "g++ framework.cpp -g -w -lm -std=c++14 -o OUTPUT_PROGRAM"}, "c": {"version": "default", "command": "gcc framework.cpp -g -w -lm -o OUTPUT_PROGRAM"}}, "standard": {"standard_output": ["standard_output0"], "hidden_support": [], "support": ["framework.cpp"], "random_source": [], "standard_input": ["standard_input0"]}, "output_program": "main.exe", "standard_language": "c++", "limits": {"time": 1000, "memory": 32}, "submission": ["source.h"]}, "ptype_id": 0, "files": {"standard_output": {"standard_output0": "2\n0\n-1\n3\n4\n"}, "support": {"framework.cpp": "#include<iostream>\n#include<string>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\n#include \"source.h\"\n\nstruct Point{\n\tint x,y;\n\tbool operator<(const Point& p) {\n\t\treturn (x<p.x || (x==p.x&&y<p.y));\n\t}\n};\n\nint main()\n{\n\t//freopen(\"test01.in\", \"r\", stdin);\n\t//freopen(\"test01.out\", \"w\", stdout);\n\n\n\t{\n\tint A[5] = { 2, 10, 8, 6, 9 };\n\tcout<<find_lower_bound(A, 5, 9)<<endl;\n\t}\n\t{\n\tint A[5] = { 2, 10, 8, 2, 9 };\n\tcout<<find_lower_bound(A, 5, 3)<<endl;\n\t}\n\t{\n\tint A[5] = { 2, 1, 2, 6, 9 };\n\tcout<<find_lower_bound(A, 5, 1)<<endl;\n\t}\n\n\tdouble B[5] = { 3.0, 4.5, 6.0, 5.1, 1.3 };\n\tcout<<find_lower_bound(B, 5, 5.2)<<endl;\n\n\tPoint C[5] = { {1,2},{2,3},{4,5},{1,3},{2,4}};\n\tPoint c={3,2};\n\tcout<<find_lower_bound(C,5,c)<<endl;\n\n\treturn 0;\n}"}, "standard_input": {"standard_input0": ""}, "hidden_support": {}, "random_source": {}, "submission": {"source.h": "template<typename T>\nint find_lower_bound(T seq[], int n, const T& value) {\n\tT temp;\n\tint flag;\n\tint flag2 = 0;\n\tfor (int i = 0; i != n; i++) {\n\t\tif (seq[i] < value && flag2 == 0) {\n\t\t\ttemp = seq[i];\n\t\t\tflag = i;\n\t\t\tflag2++;\n\t\t} else if(seq[i] < value && flag2 != 0 && temp < seq[i]) {\n\t\t\ttemp = seq[i];\n\t\t\tflag = i;\n\t\t}\n\t}\n\tif (flag2 == 0) {\n\t\treturn -1;\n\t} else {\n\t\treturn flag;\n\t}\n}\n\n"}}, "title": "From Sicily::2331 - Template::1005::Search a value", "description": "# Description\n<div>&nbsp;</div>\r\n<div style=\"text-indent: 21pt\"><font size=\"3\">Write a&nbsp;generic function&nbsp;<span style=\"color: #0000ff\">int find_lower_bound(T seq[], int n, const T&amp; value)</span>.&nbsp;The function&nbsp;returns the index of the largest element in the given sequence that is less than the given value. If multiple elements satisfy, return the one with smallest index. Return -1 if no such element exists.&nbsp;</font>&nbsp;</div>\r\n<div style=\"text-indent: 21pt\"><font size=\"3\">Your submitted source code should include the implementation of the <span style=\"color: #0000ff\">find_lower_bound</span> function template.</font></div>\r\n<div style=\"text-indent: 21pt\"><font size=\"3\">No main() function should be included.</font></div>\r\n<p>&nbsp;</p>\n# Input\n\n# Output\n\n# Sample_Input\n```\n\n```\n# Sample_Ouput\n```\n\n```\n# Hint\n\n"}