{"ptype_id": 0, "files": {"submission": {"source.h": "#include <iostream>\nusing namespace std;\n\ntemplate < typename T >\nT maxValue (const T value1, const T value2) {\n\tif (value1 >= value2)\n\t\treturn value1;\n\telse\n\t\treturn value2;\n}\n\nchar maxValue(const char char1, const char char2) {\n\tchar ch1 = char1;\n\tchar ch2 = char2;\n\tif (char1 >= 'a' && char1 <= 'z')\n\t\tch1 += 'A' -'a';\n\tif (char2 >= 'a' && char2 <= 'z')\n\t\tch2 += 'A' -'a';\n\tif (ch1 >= ch2)\n\t\treturn char1;\n\telse\n\t\treturn char2;\n}\n"}, "random_source": {}, "standard_output": {"standard_output0": "2\n1\n2\n5\n3\n1\n2\n1.4\n2\n1.4\n3\n1.4\nabc\nabc\nabc\nabc\nz*\nabc\nc\nb\nA\nZ\ny\nA\n"}, "support": {"framework.cpp": "#include<iostream>\n#include<string>\n#include\"source.h\"\nusing namespace std;\n\nint main(){\n  \n  int intArray[] =\n  {\n    1, 2, -7, 2, 5, 3, 1\n  };\n  for(int i=1; i<7; i++)\n    cout << maxValue(intArray[0], intArray[i]) << endl;\n\n  double doubleArray[] =\n  {\n    1.4, 2, 0.4, 2, 0.5, 3, 1\n  };\n  for(int i=1; i<7; i++)\n    cout << maxValue(doubleArray[0], doubleArray[i]) << endl;\n\n\n\n  string stringArray[] =\n  {\n    \"abc\", \"ZBD\", \"ZbD\", \"abD\", \"Abc\", \"z*\", \"Z\"\n  };  \n  for(int i=1; i<7; i++)\n    cout << maxValue(stringArray[0], stringArray[i]) << endl;\n  \n  char charArray[] =\n  {\n    'A', 'c', 'b', 'a', 'Z', 'y', '*'\n  };\n  for(int i=1; i<7; i++)\n    cout << maxValue(charArray[0], charArray[i]) << endl;\n  \n  \n  return 0;\n}\n"}, "hidden_support": {}, "standard_input": {"standard_input0": ""}}, "description": "# Description\n<p>Design a generic function that returns a maximum element from an array. You should test your function with the array of int, double, std::string&nbsp;and char.<br />\r\nUsing the following function header:<br />\r\ntemplate &lt; typename T &gt;<br />\r\nT maxValue (const T value1, const T value2)<br />\r\n\u5f53\u6bd4\u8f83\u4e24\u4e2achar\u5927\u5c0f\u65f6\uff0c\u5982\u679cchar\u662f\u5b57\u6bcd\uff0c\u5c06\u5176\u89c6\u4e3a\u5927\u5199\u5b57\u6bcd\u8fdb\u884c\u6bd4\u8f83\u3002<br />\r\n\u5f53\u4e24\u4e2achar\u5927\u5c0f\u76f8\u7b49\u65f6\uff0c\u8fd4\u56devalue1.<br />\r\n\u4f8b\u5982\uff0cmaxValue('B','a')\u8fd4\u56deB, maxValue('B','b')\u8fd4\u56deB, maxValue('B','c')\u8fd4\u56dec.<br />\r\n&nbsp;</p>\n# Input\n\n# Output\n\n# Sample_Input\n```\n\n```\n# Sample_Ouput\n```\n\n```\n# Hint\n\n", "title": "From Sicily::2331 - Template::1002::MaxValue template function", "config": {"google tests info": {}, "exec_flag": "--gtest_output=xml:/tmp/Result.xml", "compilers": {"c": {"version": "default", "command": "gcc framework.cpp -g -w -lm -o OUTPUT_PROGRAM"}, "c++": {"version": "default", "command": "g++ framework.cpp -g -w -lm -std=c++14 -o OUTPUT_PROGRAM"}, "clang++": {"version": "default", "command": "clang++ framework.cpp -g -w -lm -std=c++11 -o OUTPUT_PROGRAM"}, "clang": {"version": "default", "command": "clang framework.cpp -g -w -lm -o OUTPUT_PROGRAM"}}, "standard_language": "c++", "output_program": "main.exe", "submission": ["source.h"], "entry_point": "standard_main.exe", "random": {"run_times": 0, "compile_command": "gcc SOURCE -w -std=c++14 -o random"}, "grading": {"compile check": 10, "random tests": 0, "memory check": 0, "google tests detail": {}, "static check": 20, "google tests": 0, "standard tests": 70}, "language": ["c++"], "limits": {"time": 1000, "memory": 32}, "standard_score": 100, "standard": {"random_source": [], "hidden_support": [], "standard_input": ["standard_input0"], "standard_output": ["standard_output0"], "support": ["framework.cpp"]}}}