{"files": {"standard_output": {"standard_output0": "9\n8\n7\n6\n5\n4\n3\n2\n1\n0\n9\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\n8\n7\n6\n5\n4\n3\n2\n1\n0\n100\n8\n7\n6\n5\n4\n3\n2\n1\n0\n!\n100\n8\n7\n6\n5\n4\n3\n2\n1\n0\n"}, "standard_input": {"standard_input0": ""}, "submission": {"source.h": "#include <iostream>\n#include <string>\nusing namespace std;\ntemplate<typename T>\nclass Stack {\n\tpublic:\n\t\tStack() {\n\t\t\ttop = 0;\n\t\t};\n\t\t~Stack() {\n\t\t\tnode *p;\n\t\t\tif(top!=0) {\n\t\t\t\tp = top;\n\t\t\t\ttop = top->link;\n\t\t\t\tdelete p;\n\t\t\t}\n\t\t};\n\t\tbool empty() {\n\t\t\tif(top == 0) return true;\n\t\t\telse return false;\n\t\t};\n\t\tT peek() {\n\t\t\treturn top->element;\n\t\t};\n\t\tvoid push(T value) {\n\t\t\tnode *p;\n\t\t\tp = new node;\n\t\t\tp->link = top;\n\t\t\tp->element = value;\n\t\t\ttop = p;\n\t\t};\n\t\tT pop() {\n\t\t\tnode *p;\n\t\t\tp = top;\n\t\t\ttop = top->link;\n\t\t\tdelete p;\n\t\t};\n\t\tint getSize() {\n\t\t};\n\t\tvoid printStack() {\n\t\t\tnode *p;\n\t\t\tp = top;\n\t\t\twhile(p!=0) {\n\t\t\t\tcout<<p->element<<endl;\n\t\t\t\tp = p->link;\n\t\t\t}\n\t\t};\n\tprivate:\n\t\tstruct node {\n\t\t\tT element;\n\t\t\tnode *link;\n\t\t};\n\t\tnode *top;\n};\n\n"}, "hidden_support": {}, "support": {"framework.cpp": "#include <iostream>\n#include\"source.h\"\nusing namespace std;\n \n\nint main()\n{\n\n  Stack<int> s;\n \n  for(int i=0;i<10;++i) s.push(i);\n  s.printStack();\n\n  cout << s.peek() << endl;\n  s.printStack();\n\n  s.pop();\n  s.printStack();\n  \n  s.push(100);\n  s.printStack();\n  \n  cout << \"!\" << endl;\n  while (!s.empty())\n  {\n    cout << s.peek() << endl;\n    s.pop();\n  }\n  \n  return 0;\n\n}\n"}, "random_source": {}}, "title": "From Sicily::2331 - Template::1000::Function printStack", "config": {"language": ["c++"], "limits": {"memory": 32, "time": 1000}, "compilers": {"clang++": {"command": "clang++ framework.cpp -g -w -lm -std=c++11 -o OUTPUT_PROGRAM", "version": "default"}, "clang": {"command": "clang framework.cpp -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}, "c": {"command": "gcc framework.cpp -g -w -lm -o OUTPUT_PROGRAM", "version": "default"}, "c++": {"command": "g++ framework.cpp -g -w -lm -std=c++14 -o OUTPUT_PROGRAM", "version": "default"}}, "standard_score": 100, "standard_language": "c++", "random": {"compile_command": "gcc SOURCE -w -std=c++14 -o random", "run_times": 0}, "submission": ["source.h"], "exec_flag": "--gtest_output=xml:/tmp/Result.xml", "grading": {"memory check": 0, "compile check": 10, "standard tests": 70, "google tests detail": {}, "random tests": 0, "google tests": 0, "static check": 20}, "output_program": "main.exe", "standard": {"standard_output": ["standard_output0"], "standard_input": ["standard_input0"], "hidden_support": [], "random_source": [], "support": ["framework.cpp"]}, "google tests info": {}, "entry_point": "standard_main.exe"}, "ptype_id": 0, "description": "# Function printStack\n\n# Description\n<p>Rewrite the Stack class to add the printStack function as an instance function to display all the elements in the stack, as follows:<br />\r\ntemplate&lt;typename T&gt;<br />\r\nclass Stack<br />\r\n{<br />\r\npublic:<br />\r\n&nbsp; Stack();<br />\r\n&nbsp; bool empty();<br />\r\n&nbsp; T peek();<br />\r\n&nbsp; void push(T value);<br />\r\n&nbsp; T pop();<br />\r\n&nbsp; int getSize();<br />\r\n&nbsp; void printStack();<br />\r\n};<br />\r\n<br />\r\nThe printStack() function output the elements in the stack from top to bottom, each element in one line. Just output the elements, don't erase the elements in the stack.<br />\r\n&nbsp; The following codes:<br />\r\nStack&lt;int&gt; s;<br />\r\nfor(int i=0;i&lt;3;++i) s.push(i);<br />\r\ns.printStack();<br />\r\ns.push(3);<br />\r\ns.printStack();<br />\r\n<br />\r\n&nbsp; Output:<br />\r\n2<br />\r\n1<br />\r\n0<br />\r\n3<br />\r\n2<br />\r\n1<br />\r\n0<br />\r\n&nbsp;</p>\n\n# Input\n\n\n# Output\n\n\n# Sample_Input\n```\n\n```\n\n# Sample_Ouput\n```\n\n```\n\n# Hint\n\n\n"}