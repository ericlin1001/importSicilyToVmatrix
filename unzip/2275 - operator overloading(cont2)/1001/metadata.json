{"pid":"18002","title":"The Rational class (version 2)","time_limit":"1","memory_limit":"262144","description":"<p>Implement the Rational class using the following interface:<br \/>\r\nclass Rational<br \/>\r\n{<br \/>\r\npublic:<br \/>\r\n&nbsp; Rational();<br \/>\r\n&nbsp; Rational(long numerator, long denominator);<br \/>\r\n&nbsp; string toString();<br \/>\r\n<br \/>\r\n&nbsp; \/\/ Define function operators for relational operators<br \/>\r\n&nbsp; bool operator&lt;(const Rational &amp;secondRational) const;<br \/>\r\n&nbsp; bool operator&lt;=(const Rational &amp;secondRational) const;<br \/>\r\n&nbsp; bool operator&gt;=(const Rational &amp;secondRational) const;<br \/>\r\n&nbsp; bool operator!=(const Rational &amp;secondRational) const;<br \/>\r\n&nbsp; bool operator==(const Rational &amp;secondRational) const;<br \/>\r\n<br \/>\r\n&nbsp; \/\/ Define function operators for arithmetic operators<br \/>\r\n&nbsp; Rational operator+(const Rational &amp;secondRational) const;<br \/>\r\n&nbsp; Rational operator-(const Rational &amp;secondRational) const;<br \/>\r\n&nbsp; Rational operator*(const Rational &amp;secondRational) const;<br \/>\r\n&nbsp; Rational operator\/(const Rational &amp;secondRational) const;<br \/>\r\n<br \/>\r\n&nbsp; \/\/ Define function operators for shorthand operators<br \/>\r\n&nbsp; Rational operator+=(const Rational &amp;secondRational);<br \/>\r\n&nbsp; Rational operator-=(const Rational &amp;secondRational);<br \/>\r\n&nbsp; Rational operator*=(const Rational &amp;secondRational);<br \/>\r\n&nbsp; Rational operator\/=(const Rational &amp;secondRational);<br \/>\r\n<br \/>\r\n&nbsp; \/\/ Define function operator []<br \/>\r\n&nbsp; long&amp; operator[](const int &amp;index);<br \/>\r\n<br \/>\r\n&nbsp; \/\/ Define function operators for prefix ++ and --<br \/>\r\n&nbsp; Rational operator++();<br \/>\r\n&nbsp; Rational operator--();<br \/>\r\n<br \/>\r\n&nbsp; \/\/ Define function operators for postfix ++ and --<br \/>\r\n&nbsp; Rational operator++(int dummy);<br \/>\r\n&nbsp; Rational operator--(int dummy);<br \/>\r\n<br \/>\r\n&nbsp; \/\/ Define function operators for unary + and -<br \/>\r\n&nbsp; Rational operator+();<br \/>\r\n&nbsp; Rational operator-();<br \/>\r\n<br \/>\r\n&nbsp; \/\/ Define the output and input operator<br \/>\r\n&nbsp; friend ostream &amp;operator&lt;&lt;(ostream &amp;stream, Rational &amp;rational);<br \/>\r\n&nbsp; friend istream &amp;operator&gt;&gt;(istream &amp;stream, Rational &amp;rational);<br \/>\r\n<br \/>\r\n&nbsp; \/\/ Define function operator for conversion<br \/>\r\n&nbsp; operator double();<br \/>\r\n&nbsp; <br \/>\r\n&nbsp; \/\/ Add any member needed here<br \/>\r\n<br \/>\r\nprivate:<br \/>\r\n&nbsp; long numerator;<br \/>\r\n&nbsp; long denominator;<br \/>\r\n&nbsp; static long gcd(long n, long d);<br \/>\r\n};<br \/>\r\nRational::Rational()<br \/>\r\n{ <br \/>\r\n&nbsp; numerator = 0;&nbsp; <br \/>\r\n&nbsp; denominator = 1; <br \/>\r\n}<br \/>\r\nstring Rational::toString()<br \/>\r\n{<br \/>\r\n&nbsp; char s[50];<br \/>\r\n&nbsp; if ( denominator == 1) {&nbsp; <br \/>\r\n&nbsp;&nbsp;&nbsp; sprintf(s,&quot;%ld&quot;,numerator);<br \/>\r\n&nbsp; } else {<br \/>\r\n&nbsp;&nbsp;&nbsp; sprintf(s,&quot;%ld\/%ld&quot;,numerator,denominator);<br \/>\r\n&nbsp; }<br \/>\r\n&nbsp; return string(s);<br \/>\r\n}<br \/>\r\nostream&amp; operator&lt;&lt;(ostream &amp;str, Rational &amp;rational)<br \/>\r\n{<br \/>\r\n&nbsp; cout &lt;&lt; rational.toString();<br \/>\r\n&nbsp; return str;<br \/>\r\n}<\/p>","input":"","output":"","sample_input":"","sample_output":"","accepted":"61","submissions":"353","special_judge":"0","has_framework":"1","author":"","hint":"","avail":"1","cid":"2275","rate_tot":"0","rate_count":"0","dataversion":"0","stdsid":"0"}