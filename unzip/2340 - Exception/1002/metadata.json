{"pid":"18370","title":" Modify Date class","time_limit":"1","memory_limit":"262144","description":"<p><br \/>\r\nclass Date<br \/>\r\n{<br \/>\r\npublic:<br \/>\r\n&nbsp; Date(int y=0, int m=1, int d=1);&nbsp; <br \/>\r\n&nbsp; static bool leapyear(int year);<br \/>\r\n&nbsp; int getYear() const;<br \/>\r\n&nbsp; int getMonth() const;<br \/>\r\n&nbsp; int getDay() const;<br \/>\r\nbool operator&lt;(Date &amp;d);<br \/>\r\nbool operator&lt;=(Date &amp;d);<br \/>\r\nbool operator==(Date &amp;d);<br \/>\r\nbool operator!=(Date &amp;d);<br \/>\r\nbool operator&gt;(Date &amp;d);<br \/>\r\nbool operator&gt;=(Date &amp;d);<br \/>\r\nint &amp;operator[](const string &amp;s);<br \/>\r\n&nbsp;&nbsp;&nbsp; <br \/>\r\n&nbsp; \/\/ add any member you need here&nbsp; <br \/>\r\n};<br \/>\r\nYou implementation should enable the usage like this:<br \/>\r\n<br \/>\r\n&nbsp; Date date(2011,4,1);<br \/>\r\n&nbsp; cout &lt;&lt; date[&quot;year&quot;] &lt;&lt; endl; \/\/ output 2011<br \/>\r\n&nbsp; cout &lt;&lt; date[&quot;month&quot;] &lt;&lt; endl;\/\/ output 4<br \/>\r\n&nbsp; cout &lt;&lt; date[&quot;day&quot;] &lt;&lt; endl; \/\/ output 1<br \/>\r\n&nbsp; date[&quot;year&quot;] = 2007;<br \/>\r\n&nbsp; date[&quot;month&quot;] = 11;<br \/>\r\n&nbsp; date[&quot;day&quot;] = 11;<br \/>\r\n&nbsp; cout &lt;&lt; date[&quot;year&quot;] &lt;&lt; endl; \/\/ output 2007<br \/>\r\n&nbsp; cout &lt;&lt; date[&quot;month&quot;] &lt;&lt; endl;\/\/ output 11<br \/>\r\n&nbsp; cout &lt;&lt; date[&quot;day&quot;] &lt;&lt; endl; \/\/ output 11<br \/>\r\n<br \/>\r\nWhat to do if the subscript is not one of &quot;year&quot;, &quot;month&quot; or &quot;day&quot;?&nbsp; <br \/>\r\nDefine a custom exception class named IllegalSubscriptException and let the function operator [] throw an <strong>IllegalSubscriptException<\/strong> if the subscript is not one of &quot;year&quot;, &quot;month&quot; or &quot;day&quot;.<br \/>\r\nThe test function f():<br \/>\r\nvoid f()<br \/>\r\n{<br \/>\r\n&nbsp; Date date1(2011,4,1);<br \/>\r\n&nbsp; try<br \/>\r\n&nbsp; {<br \/>\r\n&nbsp;&nbsp;&nbsp; cout &lt;&lt; date1[&quot;abc&quot;] &lt;&lt; endl;<br \/>\r\n&nbsp; }<br \/>\r\n&nbsp; catch(IllegalSubscriptException ex)<br \/>\r\n&nbsp; {<br \/>\r\n&nbsp;&nbsp;&nbsp; cout &lt;&lt; &quot;Illegal Subscript Exception&quot; &lt;&lt; endl;&nbsp; <br \/>\r\n&nbsp; }<br \/>\r\n<br \/>\r\n&nbsp; try<br \/>\r\n&nbsp; {<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; date1[&quot;abc&quot;] = 2000;<br \/>\r\n&nbsp; }<br \/>\r\n&nbsp; catch(IllegalSubscriptException ex)<br \/>\r\n&nbsp; {<br \/>\r\n&nbsp;&nbsp;&nbsp; cout &lt;&lt; &quot;Illegal Subscript Exception&quot; &lt;&lt; endl;<br \/>\r\n&nbsp; }<br \/>\r\n}<br \/>\r\nshould output:<br \/>\r\nIllegal Subscript Exception<br \/>\r\nIllegal Subscript Exception<br \/>\r\n&nbsp;<\/p>","input":"","output":"","sample_input":"","sample_output":"","accepted":"59","submissions":"124","special_judge":"0","has_framework":"1","author":"","hint":"","avail":"1","cid":"2340","rate_tot":"0","rate_count":"0","dataversion":"0","stdsid":"0"}